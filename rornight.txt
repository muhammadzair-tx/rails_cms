#2 ###########################################
otl:import 
it will run a import script and its import the data that the code needs

#3 ###########################################
oop language
1995 Yukihiro Matsumoto (Matz)
Framework::A set of code libraries and data-structures that provide generic functionality that can be used, overridden,or further specialized
 
#4 ###########################################
browser----web server-------------public folder-----routes-----controller<------->model------database
chrome-----puma,appace,enginX----				view

view[ActionView] , controller[ActionController] , model[ActiveRecord]
ActionView and ActionController are grouped togather in [ActionPack ]

#5 ###########################################
rails new cms -d mysql 
by default it gonna be sqlite 

#6 ###########################################
talked about gemfile bundle install
talked about directory structure 
config/application.rb = in this our genral application configuraiton 
initializers
environment

rails db:schema:dump go to the database and get the defination of database and dump it into a text file 

#7 ###########################################
talked about model view controller
helper help us to write in views
assets our js css all the things
mailer if our app send an mail or something 
job ????
channels action cable code here ?? 
db all our migration are here 
log all errors and information about app
vendor 3rd party code
lib your own code for reuse

#8 ###########################################
rails server nothing more 

#9 ###########################################
rails generate enter it will give us the help that what can we built 
rails generate demo index .. view2 view3 demo is controller
make demo controller 
make demo folder and a view file index.html.erb in it in views folder
make route for index view 
make other files like scss js test etc

#10 ###########################################
if file found in public folder then it will never be hit the rails server 
we oftenly put a static pages in public folder like error 404 505 etc

#11 ###########################################
there are two primary types of http request GET AND POST
GET is when you enter or click a link and POST is when you submit the data through form

route types 

simple route 	
	get "demo/index" have to write index while in root route not 
	longer version 
		match "demo/index, :to => "demo#index",
		:via => :get
default route
	:controller/:action/:id
	posts/edit/3
	get ':controller(/:action(/:id))' the prenthisis make them optional in this case action and id are optional allows to be ommited
root route
	root 'demo#index' pound sign #  if nothing will match main page of your web
resourceful routes

#13 ###########################################

make a new view in demo folder and enter a routes in get 'demo/hello' and run 
run fine however we dont tell the controller what to view bydefault rails use his sense and lookup for the view in demo folder automatically
no hello action define in demoController yet he is smart enough
render(:template => 'demo/hello') short hand render('demo/hello')

#14 ###########################################
HTTP/1.1 302 Found redirect fuction webserver request to the browser that i want a different page 
ping pong effect

redirect_to(:controller => 'demo', action => 'index' if its in a same controller we can omit controller part
redirect_to('http://lynda.com')

#15 ###########################################
erb = embeded ruby
erb template
<% code %> process and execute ruby code
<%= code %> process and execute ruby code

<%= "hello #{name}" %> output hello zair

for debugging puts in rails its output in console

#16 ###########################################
var 
@var this is the instance variable 
if you want to render a page you should use a  @instance variable so that it can be accessible thats the only way the communication b/w controller and view 
@array in edit action can be access by edit.html.erb
in controller
def index 
	@array = [1,2,3,4,5]
	render('index')
end 
in view 
<% @array.each do |f| %>
	<%= f %> <br/>
<% end %>

#17 ###########################################
link
<a href="/demo/index">index page</a> this is the basic html link
<%= link_to(text,target) %> helper method  link_to just like above one 
<%= link_to(indexpage ,"/demo/index") %>
it can also be hash
{:controller => 'demo', :action => 'index'}

#18 ###########################################
url parameter
/demo/hello?page=3&id=20&name=zair query parameter
params[:id] symbol 
@id = params['id']string works the same 
@name = params[:page] params is always a string so if we want to go into next page @page+1 not work 
<%= link_to(indexpage , {:action => 'edit' , :page => 3, :id => 20, :name => 'zair' } ) %> 
becomes
localhost:3000/demo/hello?page=3&id=4&name=zair you can see page is not the part of url 
but if you use default routes then see what happens 
get ':controller(/:action(/:page))' now page is given special place in url like
demo/hello/3?id=20&name=zair 	NOTE DEPRICIATED
now we can use in view <%= @name %>
PARAMS IS ALWAYS A STRING NOTED THAT

#19 ###########################################
field intersaction of a column and row
always puts indexes on foreign keys
schema structural defination of a database complete index table etc

#20 ###########################################
SHOW DATABASES;
CREATE DATABASE db_name;
USE db_name;
DROP DATABASE db_name;

configfure project for a database
config/database.yml add database crenditial
to check if rails have access
rails db:schema:dump 

best practice make a new user and give him a privileges to that specific database
GRANT ALL PRIVILEDGES ON rails_cms.* TO 'username'@'localhost'  
IDENTIFIED BY 'password' (.* its a wild card means all the table within that database)
SHOW GRANTS FOR 'username'@'localhost';


#21 ###########################################
migration
set of database instrucition written in ruby
migrate from one state into another 

migration maintain the schema of database with our appliction code 
create the database instantly 
helps with versioning

#22 ###########################################
generate migration 
$- rails generate migration PostComment create a file which resides in db/migrate
def change is a short hand for up and down methods
def up method that we want to make changes
def down reverse the changes

#23 ###########################################
Model along with their migration
$- rails genreate model Post  should  be singular IMP NOTE

t.column "first_name", :string, :limit => 25
t.string "last_name" SHORTHAND
binary -boolean -date -datetime -decimal -float -integer -string -text -time
:limit ->size
:default ->value
:nulll -> true/false

:precision ->number
:scale ->number

create_table :users :id => false do |col| if we don't want to add id column by defoutl
col.column "name", :string, :limit =>40
t.string "email", :default => '' ,:null => false
if we have any name in our column then this two column automatically added
t.datetime "created_at"
t.datetime "updated_at"
short hand of this is 
t.timestamps

#24 ###########################################
rails db:migrate
rake change in rails in RoR5
mysql -u root -p rails_cms 
if dont give a database name you have to tell it after putting password like 
use rails_cms

SHOW FIELDS FROM users;

select * from schema_migration in this table migration version are save 
and track which migration is run already 

now what if we want to migrate run down
rails db:migrate VERSION=0  version should be in capital letters NOTICE
runs for all migration
all the code that is define in def down will execute drop the table that we just created 

to know about where is the migration is 
rails db:migrate:status will show you which migration is up or down
give you this after you run VERSION=0 you can take the migration ID from here
 Status   Migration ID    Migration Name
--------------------------------------------------
  down    20190720115841  Do nothing yet
  down    20190720150322  Create users
-------------------------------------------------
rails db:migrate VERSION=20190720150322 
up all the migration upto that in this case Do nothing yet and so on 
but if you want to up or down specific migration you will do like this 
rails db:migrate:down VERSION=20190720150322
rails db:migrate:up VERSION=20190720150322
rails db:migrate:redo VERSION=20190720150322 redo as the word bydefault the last version (migration)

# 25 ###########################################
TABLE MIGRATION METHOD
create_table(table, options) do |t|
	... columns...
end
drop_table(table)
rename_table(table, new_name) 

COLUMN MIGRATION MEHTOD
add_column(table,column,type, options)
remove_column(table, column)
rename_column(table, column, new_name)
chage_column(table, column, type, options)

INDEX MIGRATION METHOD
add_index(table, column, options) we can apply index more then one column by send an list of column in array
:unique => true/false
:name => "your_custom_name"

remove_index(table, column)

#26 MIGRATION PROBLEM  ###########################################
#27 MIGRATION PROBLEM SOLUTION ###########################################
#28 CHALLENGE CREATE MIGRATION ########################################### 

rails g model Subject.....Page....Section
adding code in migration 

#29 ACTIVERECORD AND ACTIVERELATION ###########################################

active record : design pattern for relational database
ActiveRecord Rails implementaion of active record pattern 
retrieve and manipultae data as objects .not as static rows
EXAMPLE OF ACTIVERECORD
user = User.new
user.first_name = "zair"
user.save # SQL INSERT

user.last_name = "umer"
user.save #SQL UPDATE

user.delete # SQL DELETE

AcitveRelation also known as ARel
object-oriented interpretation of relation algebra 
simplifies the genratioiion of complex database quires
small queruies are chainable 
complex joins and aggregation use efficient sql
queries do not execute until needed

EXAMPLE OF ACTIVE RELATION
users = User.where(:first_name => "zair")
users = users.order("last_name ASC").limit(5)

SELECT users.* FROM users 
WHERE users.first_name = "zair" 
ORDER BY users.last_name ASC 
LIMIT 5

#30 ###########################################
MODEL NAMING 
Names matter
all model inherit from ApplicationRecord which is inherit form ActiveRecord::Base and this is the core part of rails where we adding  behaviour to class
the commen code for all the model place in ApplictionRecord
table name maybe the same as model name and model class name
it is a ruby convention tough
but if you dont want to then no problem 

self.table_name = "admin_users"
or change the class name and file name too class AdminUser <- User and file name admin_user.rb <- user.rb 

#31 ###########################################
MODEL ATTRIBUTE
attr_accessor :first_name it is a short hand  for getter and setter function 
in a rails model when we inherit from ActionRecord::Base we gain alot of behaviour and ability that is built
in ActiveRecord::Base
FOR EXAMPLE it already know that where to locate the database table that correspond with the model and table columns 
give us setter and getter automatically and also know that how to type cast them correctly 
if visible is boolean its comes as boolean and goes as an boolean value

#32 ###########################################
THE RAILS CONSOLE 
irb 
raisl console development

#33 ###########################################
u = User.new
u.new_record?   # return true because yes this is not save to the database yet
or 
if u.save  puts "successfully insert"
p = Page.new(:name => "First Page", :permalink => 'first page', :position => 1)

#34 ###########################################
UPDATE RECORDS
u = User.find(3)
u.name = "zair" # and step by step 
s = Subject.find(4)
s.updated_attributes(:name => "zair", :visible => true)

#35 ###########################################
DELETE RECORDS
u = User.find(3)
u.destroy
u #return you the record even though that record is no longer in database for you inpection 

#36 ###########################################
FIND RECORDS
priamry key finder  
User.find(3)

dynamic finders 
User.find_by_name("First Subject") # return object or nil arais no error 

User.all # return object or nil arais no error 
User.first # return object or nil arais no error 
User.last # return object or nil arais no error 

#37 ###########################################
QUERY METHODS
by string #Flexible but raw SQL
"name='test' AND visible= true"
"name='#{@name}' AND visible = true" #@name could be a point for sql injection 
by array 
["name=? AND visible = true","test"] santize it
hash
{:name => "test", "visible => true} safe
each key-value pair joined with AND
only work with equlality and ranges (34,354,[23,45,4]) whatever 
we don't have complex sql idea in FOR EXAMPLE OR, LIKE , LESS THAN OR GREATER THAN

can be chained up 
User.where(:lastn => 'umer').where(:firstn=>'zair')
User.where(:lastn => 'umer' , :firstn => 'zair')
where clause dont executes database imidiatly  execute in last when all the data is 
but no or like less than or greater than

#38 ###########################################
QUERY METHODS: ORDER, LIMIT AND OFFSET(skip the records)
User.order(:postition).limit(20).offset(40)
order("postion")
order(:postition => :asc) by default ascending
order("position ASC")

NOTICE you have to specify which table when you retrive a record from more than one table 
order("users.created_at ASC")

#39 ###########################################
NAMED SCOPE
queries defined in a model
defined using ActiveRelation query methods
can be called like ActiveRelation methods and can accepts parameters
rails 5 lamda syntax
scope :acitve, lambda {where(:active => true)}
scope :acitve -> {where(:active => true)} #staby lambda
same as method
def self.active
	where(:active => trur)
end

scope :newest_first, lambda {order("created_at DESC")
scope :search , lambda {|query| where(["name LIKE ?", "%#{query}%"])}
scope :with_content_type, lambda {|ctype|where(:active => ctype)}
def self.with_content_type(ctype)
	where(:content_type => ctype)
end
section.with_content_type('html')
both work in the same way the why we use lambda syntax?????????

scope :recent , lambda{
where(:created_at => 1.week.ago..Time.now)
}
evaluated
now in this example time.now in method will have the value(time)
when rails first boots up on the other hand scope have the value(time)
exact at the moment 
and for the chaining scopes 
var = Article.recent.visible.newest_first
much shorter and readable clear
when its call

#40 ###########################################
relationship 
all three

#41 ono-to-one ###########################################
has_one :page (in Subject model)
belongs_to :subject, {:foreign_key => 'foo_id'}  (in Page Model)
we don't need to specifiy foregin key if we already made a column with the other table name 
like subject_id  

subject = subject.find(1)
subject id 1 name: "ror' postition: 1 visible true cre....
first_page = Page.new (:name => "first" :permalink => "first_page" :postion => 1)
return
page id nill subject_id:nil name: "first" permalink: "first_page" position: 1

subject.page = first_page 
it will add forign key
page id 2 subject_id:1 name: "first" permalink: "first_page" position: 1

now remove the association 
subject.page = nil
update 'page' SET 'subject_id' = nil where 'page'.'id' = 2 
or if you want to destroy 
subject.page.destroy

#42 one to many ###########################################
return array 
Subject has_many :pages
Page belongs_to :subject

subject.pages() return all the pages related to that subject
subject.pages << page if we want to add a page to a collection append opratore
subject.pages = [page,page,page] we have to defined every thing within the collecction
subject.pages.delete(page) if i want to delete a page and the object of the page that i want to delte
subject.pages.destroy(page) delete the page and accociation also 
subject.pages.clear to remove all pages 
subject.pages.empty? to know if array is empty
subject.pages.size return the no of pages 
create a page first_page 
then 
first_page have pageid and subject id is nil
s = Subject.find(2)
first_page = Page.new(:name => "First Page", :permalink => 'first' :postion => 1)
s.pages << first_page
but now it have it

#43 belongs_to presence validation ###########################################
change in rails 5.0
an object that has belongs_to relationship could be save to the database
even it didn't have the parent object associate with it but not in rails 5
now ActiveRecord adds a validation for the object presence
means order can't be place witout a customer
you can disable it for rails 4 apps in configuraiton for entire application
Disable: {:optional => true}
if you create a new record and try to save it without the parent 
page.errors.full_messages  return ["subject must exist"]
belongs_to :subject,{:optional => true }
belongs_to page is not save until subject exist

#44 many to many association ###########################################

-require a join table 
(you can name this table anything you want but rails have a convention for this too
firstTable+_+secondTable 
-two foreign keys; index both keys together
-no primary key column (:id => false)
-add same instance methods to the class like one to many


plurals and alphabatical order and underscore
Example

Project-collaborator
collaborators_projects

adminUser-page
admin_users_pages 

rails g migration CreateAdminUsersPagesJoin # create keyword rails convention understand that we want to create a table 

has_and_belongs_to_many :admin_users, :join_table => 'admin_users_pages'
#we can specify the join table if we do not follow rails convention

has_and_belongs_to_many :pages
#in admin_users.rb model

page = page.find(3)
me = AdminUser.new(:first_name => 'zair', :last_name => 'umer', :username => 'spy')
page.admin_users << me 
mysql> select * from admin_users_pages;
+---------------+---------+
| admin_user_id | page_id |
+---------------+---------+
|             2 |       3 |
+---------------+---------+

#45###########################################
MANY TO MANY ASSOCIATION :RICH

compared to many-to-many simple associations
-still uses a join table with two indexed foregin keys
-Requires a primary key column (:id)
-join table has its own model
-no table name conventions to follow 
-name ending in "-ments" or "ships" work well
like assignments - engagments - autherships - memberships 

AdminUser-Section (the idea everytime the admin made changes to the section we keep the track in table section_edits

AdminUser has_many :section_edits
sectionEdit belongs_to :admin_user

Section has_many :section_edits
SectionEdit belongs_to :section

rails g model SectionEdit

class SectionEdit < ApplicationRecord
    belongs_to :admin_user
    belongs_to :section
end
class AdminUser < ApplicationRecord
    has_many :section_edits
end
class Section < ApplicationRecord
    has_many :section_edits
end
sec = Section.create(:name => "Section One", position: 1)
p = Page.find(2)
p.sections << sec
me = AdminUser.find(2)
edit = SectionEdit.new(:summary => 'Test edit', :admin_user => me, :section => sec)
edit.save
return 
INSERT INTO `section_edits` (`admin_user_id`, `section_id`, `summary`, `created_at`, `updated_at`) VALUES (2, 1, 'Test edit', '2019-07-22 01:46:17', '2019-07-22 01:46:17')
me.section_edits if it use its cache and giving you an error
me.section_edits(true)

#46###########################################
TRAVERSING A RICH ASSOCIATION
qasam ly lo jo samjh ai ho
??????????????????????????????????????????????????????????????????????????????????

#47###########################################
CRUD 
theory about crud
seprate controller for each Subjects, Pages , Sections #plural because we control all of our pages not just one page with that controller
allows for clear URLs
rails g controller Subjects index show new edit delete 


#48###########################################
REST
Representational State Transfer
do not perform procedure 
but Perform state transformations upon resources 

REST Paradigm Requirments
-1 Organize code into resources
Encourages one controller for each model
-2 Learn HTTP verbs for working with resources 
Determine which CRUD acitons are suited for each verb
-3 Map a new URL syntax to controller actions 
Change Rails routes
-4 Modify existing links and forms to use new URL syntax 
Use resourceful URL helpers

REST HTTP Verbs there are four
GET POST Patch Delete 

it fake true rest request by adding a hidden input field called _method and uses post as the method for the form
<form method="PATCH" action="/subjects/123">
#....
</form>
<form method="POST" action="/subjects/123">
	<input type="hidden" name="_method" value="patch" />
</form>

#49###########################################
Resourceful Routes
what we do is match routes or default routes we can use it for REST but 
then why Resourceful Routes 
-first it is Rails defualts
-Optimized for rest
-simple, consistent,organized structure 
-imporves application security
-Most pro use this

resources :subjects    <------ Resourceful Routes
resources :pages       Notice :: delete is not by default in it because it is optional want to show page or js popup your choice 
resources :sections

http method are now gonna determine which will execute
action show , update and destroy having the same url /subjects/:id
if its GET then show will run if its PATCH update will run and so on 

Limiting Resourcful Routes 
you don't have to define all the action on the resource 

resources :admin_users, :expect => [:show]
resources :products, :only => [:index, :show]
you can controll which should be given routes

Adding Resourceful Routes
it is also possible to add additional resources

resources :subject do 
	member do 
		get :delete # which accept record id in url like edit and update 
	end 
	collection do 
		get :export #it oprate on resource as whole they do not except record id like index , new , create 
	end 
end
#50###########################################
RESOURCEFUL URL HELPER
HTTP Verb + URL Helper combine 
{:controller => 'subjects', :action => 'show' , :id => 5}
subject_path(5) url helper
<%= link_to('All Subjects', subjects_path ) %>
<%= link_to('All subjects', subjects_path(:page => 3) %>
<%= link_to('Show Subject', subject_path(@subject.id) %> .id is optional rails is smart enough
<%= link_to('Show Subject', Subject_path(@subject.id , :format => 'verbose' )) %>
<%= link_to('Edit Subject', edit_subject_path(@subject.id)) %>

#51###########################################
READ ACTION index

<td class="center"><%= subject.visible ? 'Yes' : 'No' %></td>

#52###########################################
READ ACTION show

way to write URL
<%# link_to("Show", 'subjects#{subject.id}', :class => 'action show') %>
<%# link_to("Show", {:controller => 'subjects' , :action => 'show', :id => subject.id }, :class => 'action show') %>
<%= link_to("Show", subject_path(subject), :class => 'action show') %>
#53###########################################
FORM BASICS 
rails/erb vs html
+ any template code that can be written with rails/erb can also be written with simple HTML
+ Writing template code in rails/erb is almost always easier and more powerful than simple HTML
LOOK in cms-> views hello.html.erb comments or go end of this file brief explanation down there

#54###########################################
CREATE ACTION 

def create
    #steps
    + instantite a new object using form parameters
    + save object
    + if save succeed, redirects to the index action
    + if fails redisplay the form so user can fix the problems 

    #@subject = Subject.new(params[:subject]) #problem of mass assignment FORBIDEN ATTRIBUTES ERROR
    @subject = Subject.new(subject_params)

    if @subject.save
      redirect_to(subjects_path)
    else
      render('new') #render just form template having already @subject and populate with old values which have validation error
      #user don't have to enter all that valus again 
    end
  end

#56###########################################
Rails term for passing a hash of values to an object to be assigned as attributes
mass assignment will cause a problem 

LOOK in cms-> views hello.html.erb comments or go end of this file brief explanation down there #56
private # made a function because its use in many other actions for white listing and only require parameter are getting 
  def subject_params
    params.require(:subject).permit(:name, :position, :visible)
  end

#59###########################################
HTML stateless
Each request is distinct; no previous information. like you set the dark theme of youtube and set auto next off 
Cookies and sessions allow data between requests
Flash Hash 
+ stores message in session data
+ clears old messages after every request so that old message dont stick around 
+ they stick around for one redirect like "successfully deleted"
flash[:notice] = "successfully deleted" key-> "notice" message
flash[:error] = "not a valid value" 
notice 
you could assign whole ruby object to it but its not good practice and do not recommended
object can be large and take up lots of memory and if they are not taken up directly from the database they can be out0fdate?? or stail??
if you need to access lots of data then you should be storing it in database or in session file
flash is for only for short text that you want to save between request

#5.x###########################################
making crud for subject , page and section
#5.x###########################################

#62###########################################
by default if you not set to false layouts in controller it will use appliction.html.erb layout in view/layout
you can set it off by "layout false" 

but if you want to use a your specific layout 
first create it in view/layout admin.html.erb and go to that controller where you want to use 
and set layout 'admin'

now all your common code in page move to that template 'admin'
like
<% if !flash[:notice].blank?  # its check for the nil but also for the empty strings %>
    <%= flash[:notice] %>
  </div>
<% end %>

<title>Simple CMS: <%= @page_title || "Admin Area"</title>

Notice @variable in controller action available not just in the view/subjects/show but also in the template too admin.html.erb 
and not in sequecne manner  we set title in views but title tag are on the top 

#63###########################################
PARTIAL TEMPLATE
<%= form_for(@page, :url => pages_path, :method => 'post') do |f| %>
  <%# form_for(@subject) do |f|     we dont have to specify them becuase you are post something and see rails route %> 
    <%= render(:parital =>"form", :locals => {:f => f}) %>
    <%# partial reusable eletment notice in our form we use 'f' 
    its not gonna available their we have to send it %>
    <div class="form-buttons">
      <%= f.submit("Create Subject") %>
    </div>
  <% end %>

#64###########################################
TEXT HELPER
rails provide many helper method to do common tast in view template easiar

WORD_WRAP
store in variable or pullback from database 
<%= word_wrap(text, :line_width => 30 %>
make a line with 30 characters without breaking the word and put a /n in the end of a line 

SIMPLE_FORMAT
text = This is sample text/n with a line break."
<%= simple_format(text) %>
<p>This is sample text \n<be /> with a line break</p>

TRUNCATE 
<%= truncate(text, length => 18) %>
"This is sample text..."

PLURALIZE 
<% [0,1,2].each do |n| %>
<%= pluralize(n, 'product') %> found.<br />
<% end %>
 out put 
0 prodects found . <br/>
1 prodect found . <br/>
2 prodects found . <br/> 
and its is smart enough that person is persons and ox is oxens
more text helpers 
TRUNCATE_words  (truncate words instead of characters)
HIGHLIGHT (looks of keyprhase)
EXCERPT

#65###########################################
NUMBERS HELPER 
:delimiter , 
:serprator
:percetion
number_to_currency (24.4) = $24.40
	number_to_currency (2.4, :percision => 0, :unit => "rs", :format => "%n %u") 2 rs
number_to_percentage (34.5) 34.500 %
number_to_rounded ()
number_to_delimited (234234, :delimiter => '-') = 234-234
number_to_human (234234234) 234 Million
number_to_human_size (123467) 1.8MB 
number_to_phone (1231231233) = 123-123-1233
other conutry code and fully customized

#66###########################################
DATE AND TIME helpers
using integers
second seconds
minute minutes
hour hours
week weeks
month months
year years

Time.now + 30.days - 23.minutes 
Time.now - 30.days = 30.days.ago
Time.now + 30.days = 30.days.from_now	
next_week 
next_month etc check the docs
 
datetime.strftime(format_string )
Time.now.strftime( "%B  %d, %Y %H:%M") = "July 17, 2016 18:14"

symbol check the docs

:db 
:number
:time
:short
:long etc

#67###########################################
CUSTOM HELPERS
ruby modules 
app/helper when ever we created controller helper file with that name available corresponding view
apply on pages view visible outputing a green or red box upon visible status in css and html
these helpers are only for views 
USEFUL FOR

1- Frequently used code 
2- Storing complex code to simplify view templates
3- writing large sections of Ruby code

#68###########################################
SANITIZE HELPERS

cross-site scripting (XSS)
can be submitted via url parametersor web forms

evil = "<script>alert('You are Hacked!');</script>"
<%= evil %>
and we put this in our site witout sanitizing then it could harm

undesirable HTML 
comment = '<p> style="font-size: 100px; color: red;">i hate you</p></div>

<%=comment %> this will disturb our layout and messed up our design

so solution to this 
escape all user-entered data 
- url parameters
- form parameter
- cookie data 
- database data
ESCAPE METHODS
by default rails html_escape
html_escape()
h() its is by default now rails 3 < 
white list
raw() if we modify the string then its set it backs to the unsafe string
html_safe do the same thing but not modify remain the same 

escape output
strip_links(text) = remove links 
text = '<strong>Please</strong> visit
<a href="http://example.com">us</a>.'

strip_tags(html) = remove html tags only tags 

sanitize(html,options) remove all but only allowed which we are define in this 
sanitize(@subject.content, :tags => ['p', 'br', 'strong', 'em'] , :attributes => ['id', 'class', 'style'])

#69###########################################
ASSET PIPELINE

benifits
- concatenates CSS and JavaScript files  into a single file 
- compresses and minifies CSS and JavaScript remove white space and comments by using Gzip webserver supports that
- precompile CSS and JavaScript
- Allows writing asstes in other languages like coffee script and SASS
- Adds asset fingerprinting a clever way to force web brower keep cache up to date take the if the something change then md file is change so the name of file then he request for update assets
pipeline is preferd location is app/assets/.. but in public/.. pipeline benifts are no longer more and serve as static no cache busting no sass no coffee no compression no concatenates

MANIFEST FILES 
- contain directives for including assets files (which assets should be included and in what orders 
- Loaded, processed, concatenated, compressed
- Serve one file , but develop with many files

DEVELOPMENT VS PRODUCTION
DEVELOPMETN
- skip concatenation , comprassion , fingerprinting , and does file processing SASS and Coffee 
because in development changes are occur frequently thats why it does only file processing 

Production
its skip the assets pipling at all not even file processing 
rails assumes that assests have been precompiled for it 
and that is necessery step when we deploying 

Assets Pipeling 
app/assets/stylesheet/application.css -> 
make -> public/assets/applications-32434534c54b4r.css and public/assets/applicaiton-e2342f34c34.css.gz

how we do this precompilation
make sure our environment is set to production 
export RAILS_ENV = PRODUCITON
bundle exec rails assets:precompile 
most of the deployment system do it for your self if not you have to do it by your self	 

#70###########################################
write stylesheet 
location:
with asset pipeline :/app/assets/stylesheets
withpout asset pipeline :/pulic/stylesheets
filename: should end in ".css" ; SASS files end in ".css.scss" 

WHAT IS SASS? 
- "Syntactically Awesome Stylesheets"
- Scripting language which is interpreted into CSS
- Similer to CSS but with extra features 
like nested rules, variables , mixins , selector inheritance for more go to sass website 

$main_color = tomato;

#content {
  padding-left: 100px;
  padding-right: 100px;
  color: $main_color  	//<-------------
  a {   		//<-------------
  text-decoration: none;
  &:hover { text-decoration: underline; }//<---------------
	// & means a here equal to 
	// a:hover { text-decoration: underline; }
}
  h2 {
    width: 100%;
    text-align: center;
  }
}
in application.css
 *= require_tree . 	 // loads all of the file that included  stylesheet require_tree all the file . is current directory 
 *= require  primary 	// require primary style sheet which is our custom css
 *= require_self 	 // this is the directive that says that it should load in any style that we might happen to have in this file 
 */ these comment mean something
with equal sign are directives that tells the menifist file what it should load in 

 * require_tree .
 *= require primary 
 *= require admin_additions // made another manifist file here
 * now we have two different manifist files which results the two css and i can choose which one i want to load in     
 *= require_self
 */
 now we have to make sure that rails knows to precompiled this new css too
go to config/initializes/ assets.rb
-----------
# Precompile additional assets.
# application.js, application.css, and all non-JS/CSS in the app/assets
# folder are already added.
# Rails.application.config.assets.precompile += %w( admin.js admin.css ) //<----------
uncomment this 
-------------
STYLESHEET LINK TAG
HTML TAG
<link href="/assets/stylesheet/appliction.css" rel="stylesheet" type="text/css" media="all" />
RAILS HELPER 
<%= stylesheet_link_tag('application') %>
whats great is about helper method is it does more then this 
its know in which environment we are and adjust beahaviour accordingly 
# Defaults to :media => 'screen'

#71###########################################
same as stylesheet
- write javascript file
- List javascript file in manifist
- add manifist to asset precompile list
- include a javascript tag in html

location
with asset pipeline: /app/assets/javascripts
without assets pipeline: /public/javascripts

file name" end in ".js" CoffeeScript files end in ".coffee"

WHAT IS COFFEE SCRIPT 
Scripting language that is compiled into javascript 
different syntax (more concise, readable code)
more at http://coffeescript.org

jquery 
included by default 

cable.js (manifest file for getting the feature togather for using action cable not for begginers)

application.js (manifest file just css)
//= require jquery 
//= require jquery_ujs unutrasive javascript for rails 

//= require rails-ujs unutrasive javascript for rails 
//= require activestorage
//= require turbolinks (for more advance use)
//= require demo custom <------
//= require_tree .

javaScript Helper
HTML TAG 
<script src="/assets/javascrips/application.js" type="text/javascript"></script>
RAILS HELPER 
<%= javascript_include_tag('application') %>

#72 ###########################################

javascript helpers 
<%= javascript_tag("alert(Are you sure?');") %>

<%= javascript_tag do %>
	alert('Are you sure?');
<% end %>

you should sanitize your js

<%= javascript_tag("alert('you said : #{text}');") %>
by escape_javascript() or short form j()
<%= javascript_tag("alert('you said : #{j(text)}');") %>

#73 ###########################################


location
with asset pipeline: /app/assets/images (UI images should be here)
without assets pipeline: /public/images
User-uploaded images: /public/images (user-uploaded images should be here)

image upload gems 
paperclip and carrierWave

HTML
<image src="/assets/logo.png" />

RAILS HELPER
<%= image_tag('logo.png') %>

<%= image_tag('logo.png', :size => '40x40', alt => 'logo') %>
<%= image_tag('logo.png', :width => 70, :height => 40) %>
if you inspect this into browser you
<img alt="+" src="/assets/plus_sign-b7cc7f95073832695f7b3f55aad5782d185bb133bc5581bdf737931d9059822a.png" width="11" height="11">
fingerprint if this assets change then the finger print change also and force browser to get a new assets and burst the cache  


background: $light_brown image-url('/assets/footer_gradient.png') repeat-y 0 0;

#74 ###########################################
FORM HELPER
form helper comes with three diffrent styles 

<%= text_field_tag('name', params[:name]) %>		 
text style 
	[this is not the object aware so we have to provide the attributes and the values
	 exactly like we want to appear when it outputs in html when you only want to use rails code 
	instead of html search box which have not connecting to any object simple text input which we want to 
	sent to the controller]
<%= text_field(:subject, :name) %> 			 
object aware style () 
		[it is object aware  and it knows that the text input is related to the value of the subject 
		name attribute and its pre populate the values of subject ]
<%= f.text_field(:name) %> 				 
form builder style
		[ its function exactly the same as above one but it save as to type 'subject' over and over 
		again in every form helper suppose there are 10 text input fields you have to just put f.]

form_for(@subject, :html => {:multipart => true}) do |f| #form_for is smart enough if there is any file_field it automatically includes multipart 
  
  f.label(:name)
  f.text_field(:name, :size => 40, :maxlength => 40)
  f.password_field(:password, :size => 40)
  f.hidden_field (:token, 'af343krkerj34')

  f.text_area(:description, :size => "40x5") # :col and :rows

  f.radio_button(:content_type, "Text")
  f.radio_button(:content_type, "HTML")

  f.check_box(:visible)

  f.file_field(:logo) # requires :multipart => true 

end

#75###########################################

Form options Helpers select helper

select(object, attribute, choices, opitons, html_options)

Options:
:selected => Object.attribute
:include_blank => false
:prompt => false
:disable => false

form_for(@section) do |f|

#Range
f.select( :position, 1..5 )
#Array
f.select( :content_type, ['text', 'HTML'] )
#Hash 
f.select( :visible, { "visible" => 1, "Hidden" => 2 } )
#Array of arrays 
f.select( :page_id, Page.all.map {|p| [ p.name, p.id ]} )
end

and we are use this 

in controller 
@page_count = Page.count + 1
@subjects =  Subject.sorted

in view
<td><%= f.select(:subject_id, @subjects.map {|s| [s.name, s.id]}) %></td>

#76###########################################

Date and Time form helpers 

date_select(object, attribute, options, html_options)

Options:
:start_year => Time.now.year-5
:end_year => Time.now.year+5
:order => [:year, :month, :day]
:discard_year => false
:discard_month => false
:discard_day => false
:include_blank => false
:prompt => false 
:use_month_numbers => false
:add_month_numbers => false
:use_short_month => false
:date_serprator => ""

time_select(object, attributes, options, html_options)

Options:
:include_seconds => false 
:minute_step => 1
:include_blank => false 
:prompt => false
:time_separator => ":"

datetime_select(object,attribute, options, html_options)

Options:
# all date_select and time_select options 
:datetime_spearator => "-"

<%= f.datetime_select(:created_at, :order => [:month, :day, :year]) %>

#77###########################################
FORM ERROR

validates_presence_of :name
object.errors (Array containing any errors added by validations)

object.errors.clear
object.errors.size
object.errors.each {|attr, msg| ...} # :name, "can't be blank"

object.errors.full_messages.each {|msg| ...} #"Name can't be blank" full proper english 

displaying errors 
put output html in a partial 
app/views/applications/_error_messages.html.erb

call with a custom helper
error_messages_for(:object)

validates_presence_of :name

#78###########################################

CSRF (Cross-Site Request Forgery)
type of an attack a website
Exploits user's currently logged-in state to perform actions which require authentication
you close the browser without logging out hacker could send you this image and you not know that it send request 
to your bank
<img src="http://bank.com/transfer?amt=10000&to=hacker" />

PREVENT CSRF
-require user authentication
-Regularly log out inactive useres
-GET requests should be read-only
-Actions that expect POST requests should only respond to POST requests.

<form action="/subject/create" method="post">
   <input name="authenticity_token" type="hidden" value="DVSsdfdffs3DSF34" />
   #form fields
</form>

rails automaitcally add this hidden field in our form that generate from its form helpers 
and save it into your session too smart move so when a user something send it matches that it is valid form request and from valid user 
samrt move aan

our all controller inherit from ApplicationController

one more point here if you want to work with JS and AJAX request 
you need to have 
<%= csrf_meta_tag %>
tokken in your head of your hmtl page

#79###########################################
VALIDATIONS METHODS 

- ensure data meets requirements before saving to database
- we could validate our code in controller but this is not the good approach for specific action only 
  it much better that we enforce them globally 
- validation code resides in models
- ActiveRecord::Validations

methods 

validates_presence_of :name (sould not be nil,false,""," ",[],{}) :message =>"can't be blank" that you can customize 
validates_length_of (:is, :minimum, :maximum, :within, :in) :too_short , too_long, :wrong_length => "is the wrong lengthg (shoud be {{count}} charactrers)"
validates_numericality_of (must be integer or floating :equal_to :greater_than, :less_than, :greater_than_or_equal_to, :less_than_or_equal_to, :odd, :even, only_integer
validates_inclusion_of (attribute must be in a list of choices (array or range) :in 
validates_exclusion_of (opposite of above) :message => "is reserved"
validates_format_of (attribute must match a regular expression) :with :message => "is invalid"
validate_uniqueness_of (attribute must not exit in the database) :case_sensitive :scope :message => "has already been taken"
validete_acceptance_of (must checkbox check  like terms of condition virtual attribute not gonna save in database) :accept by default '1' :message => must be accepted
validate_confirmation_of (must be confirmed by entering it twice virtual attribute email or password confirmation) only run this validation when you have confimation on your form else it would be skiped  :message => doesn't match

validate_associated activeRecord association dependency 
- Associated object or objects - must all be valid
- First argument: association name; not attribute 
- does not fail if object does not exist 
- beware of infinit loops and long cascades
Options 
:allow_nill => true
:allow_blank => true  

:on => :save/ :create /:update  (on save this for both cases create and update)  
:if => :method/ :unless =>:method  
:method -- a method defined in the model that should return true or false

#80###########################################
write validation

what to validate ? decide what good or bad data looks like 
what restrictions does your database impose?? field types, field length, and null allowed 
what would stop you application from working??

    validates_presence_of :email
    validates_length_of :email, :maximum => 100
    validates_format_of :email, :with => EMAIL_REGEX
    validates_confirmation_of :email

s = Subject.new
s.errors
s.errors.count
s.valid? output blank every time s.valid? call it update the s.errors
all activeRecord objects have this model 

s.email = "zair@blog.com"
s.email_confirmation = "umer@blog.com"
s.valid? output false message Email confirmation doesn't match Email 

#81###########################################
VALIDATES METHODS
short methods to do the same things as above also called
sexy validations 
    validates_presence_of :email
    validates_length_of :email, :maximum => 100
    validates_format_of :email, :with => EMAIL_REGEX
    validates_confirmation_of :email
like this
validates :email :presence => true,
		 :length => { :maximum => 50},
		 :uniqueness => true, 
		 :format => { :with => EMAIL_REGEX },
	 	 :confirmation => true

validates :attributes,  :presence => boolean,
			:numerically => boolean,
			:length => options_hash
			:format => {:with => regex},
			:inclusion => {:in => array_or_range}, # or you can dirsect send array and skip the :in 
			:exclusion => {:in => array_or_range},
			:acceptane => boolean,
			:uniqueness => booleanm
			:confirmation => boolean

#82###########################################
CUSTOM VALIDATIONS

validate : custom_method

private

def custom_method
	if test_case 
		errors.add(:attribute, "message")
	end
end
implemetn in admin_user.rb
all in one model
FORBIDDEN_USERNAME = ['fucker','mary','santa'] # just for sake of demonstration
validate :username_is_allowed # custom validation
private

def username_is_allowed
    if FORBIDDEN_USERNAME.include?(username)
        errrors.add(:username, "has been restricted from use.") use :base if you don't want to or have variable name in your message
    end
end

#83###########################################
COOKIES
web is a stateless environment 
web server doesn't know the previous record 
cookies help us here allow us to preserve "state"
web server sends data to the browser to save data in cookies 
Browser sends cookie data with each future request to the web server

cookies[:username] = "zair"
cookies[:username] = {
	:value => "zair",
	:expires => 1.week.from_now
}

<%= cookies[:username] %>

maximum size is 4K 4000 characters 
resides on the user's computer 

should be preserve state and save time 
store only small pieces of data
do not store sensitive data 
do not trust cookie data 


#84###########################################
SESSIONS
help us to address the same problem that cookies do
the way session works web server sends a session ID to the browser, which then saves it in a cookie 
so session use cookies to do their job
browser sends session ID with each future request to that web server
then web server uses session ID to locate the session file 
session store in server side 

session[:username] = "jsmith"
<%= session[:username] %>

Limitations of sessions 
Require time to retrieve the session file
session files accumulate over time every time a new user arrive to the site web server generate session for him
either in a file or store in database
session cookie can be deleted or hijacked can be steal session id and pretend to be that user 

session storage
*file storage 
*database storage 
*cookie storage in rails 3 
default since rails 3
super cookie (encrypted to prevent reading  , signed to prevent tampering, 4k maximum size )
fast, no lookup needed
no setup required 
no file or database bloat

session storage configuration 

config/initialzers/session_store.rb
config/secrets.yml

#85###########################################
CONTROLLER FILTERS

execute code before or after a controller aciton 
filter request before allowing acitons
remove code repetition 
perform "housekeeping" tasks 

Usages 
confirm user authentication 
set variables and default values 
find database objects 
get shopping cart 

before_action 
after_action
around_action (combo of above two)

before_action :find_subjects , :only => [:new, :create, :edit, :update]

private def find_subjects 
 @subjects = Subject.sorted 
end


filter mehtod should be declared "private"
any render or redirect before an action prevents its execution.
specify which actions activate the filter with:
:only => [:index, :new]
:except => [:edit, :delte]

filters in ApplicationController are inherited by all controllers
inherited filter can be skipped 
skip_before_aciton 
skip_after_aciton

#86###########################################

LOGGING
Sever Logs vs Application Logs 
basic request data and the error which occur before the rails application are going to show in server logs 
but web server only know about the request the send in and the data it sends back 
once he send the error to rails application the rest will remain mystry for web server 

log/development.rb
log/production.rb
log/test.rb

log level configuration
development.rb 
config.log_level = :debug , :info , :warn, :error , :fatal
production.rb 
config.log_level = :info 

rails log:clear

logger.debug(" ### the name is #{@Subject.name} ###")


#87###########################################
AUTHENTICATION INTRODUCTION

like admin can only see the page of all users list 

why authentication??
password-protected areas are commen
examining best pracitces helps avoid costly mistakes
development choices and security concernse intertwined
opportunity to explore some important feature in rails 

if the password is match 
sets session varitable to the user ID
redirect to a post-login page 
if the user want to access password protected pages then
session data available with each request
Log out 
set user ID stored in session variable to NULL


#88###########################################
SECURE PASSWORDS

encrypting passwords 
never store passwords in plain text

one way encryptions 
rails uses Blowfish 

has_secure_password 
prerequisites 
bcrypt gem installed 
column in database 'password_digest'

has_secure_password 
attr_reader :password 
validates_presence_of :password, :on => :create
validates_confirmation_of :password 

def authenticate(unencrypted_password) #magic methods that will available to us 
end

u = Admin.first
u.password_digest = "zair"
=> "$jerkltj34534er" #encrypted string
u.save 
=> false email is blank 
u.save true 
u.authenticate("zairUmer")  false

#89###########################################
create user access like devise
  get 'access/menu' #index
  get 'access/login' #new
  post 'access/attemp_login' # create
  get 'access/logout' #destroy
  
  get 'admin', :to => 'access#menu'

#90###########################################
LOGIN AND LOGOUT

#91###########################################
RESTRICT ACCESS

*Add before_action to each controller
Be careful not to forget any 
*Move before_action to ActionController
must skip_before_action in public controller
*Create AdminAreaController

before_action :confirm_logged_in #see the applicationController 

private
  
  def confirm_logged_in
    unless session[:user_id]
      flash[:notic] = "Please Login"
       redirect_to(access_login_path) 
       #we want not to show any other controller action unless user is login 
       #if that is the case we should move this to our main applicationController and 
       #add this line there before_action :confirm_logged_in, :except => [:login, :attempt_login, :logout]
    end
  end

#92###########################################

#95###########################################
PUbLIC AREA NAVIGATION

<% subjects ||= [] %>    default to emtpy array 
we are expecting array of subjects that we can go trough but if somereason we don't have subjects default to emtpy array 

<% subject.pages.visible.sorted.each do |page| %>
      <li><%= link_to_unless_current(page.name, public_show_path(page.permalink)) %></li>
      <!-- so smart of rails -->
#96###########################################
(:subject_id => @subject.id) 
in every redirect and form
<%= form_for(@page, :url => pages_path(:subject_id => @subject.id), :method => 'post') do |f| %>
we want to track subject.id 

#97###########################################
a good case see in section form view 

<td><%= f.select(:page_id, @pages.map {|s| [s.name, s.id]}) %></td>
        <!-- 
          we have three options here in edit or new 
          user can choose the page and jump around 
          we can disable this options 
          we can remove and show a page name only because user go to that specific subject and then specific page and then can create the section 
          so i think it is good option for remove it at all and replace select tag with this one below but personally i dont want to :) badmashi
          
          
          -->
        <!-- f.object.page.name 
            and this is not just it we no have to remove this by params list because it is not going from form any more page or subject 
            so we have to mention in give subject id or page id at creataion of new page or section in controller 
            like @page.subject_id = @subject.id     or in short form 
            @page.subject = subject     do the work for us       and can remove a before action :find_subjects  that is there for select option 
            
            now i am changing my mind because we have to hit data base just for this or i have a new approach why not i do pass the subjects parameters 
            but i think then i have to maintain the status of it 
        
        -->
#98###########################################
i am creating a new section and it gives me a position for select out of 7 
but on that page i have only two how to tackle this 
def set_page_count
    #@page_count = Page.count
    @page_count = @subject.pages.count
    if params[:action] ==  'new' || params[:action] == 'create'
      @page_count += 1
    end
  end
this will solve the problem but now position can be repeatable  means there can be two pages with the same position how we prevent that 
one solution is client side and server side validation but this is not the good approach because then user have to try every one of the position to see which is free 

best practice is that if its is common problem then you should look for gem
there are some of the gem 

act_as_list  		manage objects with positions 
will_pagination  	pagination
exeption_notificaion	send email when errors occur
paperclip		manage file uploaded via web forms
carrierwave		manage file uploaded via web forms
delayed_job 		Queue tasks to run later
friendly_id 		Semantic URL
acitivemerchant		credit card processing

===================================================================================
gem install mysql2 -- --with-mysql-config="D:\server\mysql\bin" --with-mysql-include="D:\server\apache2\include" --with-mysql-lib="D:\server\apache2\lib"
\q: Quit/Exit.
\c __database__: Connect to a database.
\d __table__: Show table definition including triggers.
\dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones).
\l: List databases.
\dn: List schemas.
\df: List functions.
\dv: List views.
\df+ __function__ : Show function SQL code.
\x: Pretty-format query results instead of the not-so-useful ASCII tables.

"it may sound like tough love,
but look, if at some point you got lied to, it's because you agree to get lied to.
lying's is a coperative act"

everyone is willing to give you something 
they are ready to give you something for whatever it is, they're hungry for. and that is the crux of it



===================================================================================
Go to: https://www.lynda.com/portal/sip?org=houstonlibrary.org
lib#: 2037471
pass: akosikevin215
https://www.lynda.com/learning-paths/Web/become-a-ruby-on-rails-developer

=======================================
cms- >>view/hello.html.erb 

=begin%>
  
  params[:desig]
  params[:name]
  params[:email]..and we want to save it in a data base
  
INSERT IN THE DATABASE PAIN IN THE ASS
	subject = Subject.new({:designation => params[:desig], :name => params[:name], :email => params[:email] } )
	that is not a good way it is tedious to build up that hash by grabing each parameter by name

so suppose if we have 50 inputs fields in our  form then !!  na karo raja G
	
	solution HTML Form arrYS

	<form action='/subjects' method='post'>
		<input type="text" name="subject[desig]"/>
		<input type="text" name="subject[name]"/>
		<input type="text" name="subject[email]"/>

		<input type="submit" value="Create Subject"/>
	</form>
now we have
	params[:subject][:desig]
  	params[:subject][:name]
  	params[:subject][:email]

INSERT IN THE DATA BASE NOW 
subject = Subject.new(params[:subject]) its that easy!!!  na kr qasam kha 
params[:subject] = {:desig => 'coder hai bahi', :name =>'umer' , :email => 'lala@blog.com' }
now we no longer have to built hash ourselves form does it for us 


local code block variable |f| is a form builder object and its knows subject
pros is it save object then update else new  action 
if its exist it will prepopulate the fields with the existing values

<%= form_for(@subject) do |f| %>
	<%= f.text_field(:desig) %>
	<%= f.text_field(:name) %>
	<%= f.text_field(:email) %>
	
	<%= f.submit("Create Subject") %>
#56
	but bad news this is called mass assignment 
	Subject.new(params[:subject]) because we are just dumping the into the object 
	consider this exaple 
	@user.update_attributes({:username => "zair"})
	but hacker able to replace fake version of a form that have extra fields show up in our form parameters 
	@user.update_attributes({:username => "zair",:password => "notsecret", :admin => true})

	rails v1 and v2 : blacklisting of attributes
	rails v3 : whitelisting of attributes
	rails v4-5: strong parameters

	params.permit(:name, :email) white listing means that two only available for mass assignment and others are not 
	params.require(:subject) ensure that parameter is present not permiting just to sure value is there

	params.require(:subject).permit(:name, :position, :visible)



<% end %>

<%
=end%>


1-Welcome	
2-How to use the exercise files	
3-Ruby on Rails introduction	
4-Understanding MVC architecture	
5-Create a project	
6-Configure a project	
7-File structure of a project	
8-Access a project	
9-Generate a controller and view	
10-Server request handling	
11-Routes	
12-Experiment on your own	
13-Render a template	
14-Redirect actions	
15-View templates	
16-Instance variables	
17-Links	
18-URL parameters	
19-Introduction to databases	
20-Create a database	
21-Migrations	
22-Generate migrations	
23-Generate models.mp4	
24-Run migrations	
25-Migration methods	
26-Solve migration problems	
27-Challenge - Migrations for the CMS	
28-Solution - Migrations for the CMS	
29-ActiveRecord and ActiveRelation	
30-Model naming	31-Model attributes	
32-The Rails console	
33-Create records	
34-Update records	
35-Delete records	
36-Find records	
37-Query methods - Conditions	
38-Query methods - Order, limit,  and offset	
39-Named scopes	40-Relationship types	
41-One-to-one associations	
42-One-to-many associations	
43-belongs_to presence validation	
44-Many-to-many associations - Simple	
45-Many-to-many associations - Rich	
46-Traverse a rich association	
47-CRUD	48-REST	49-Resourceful routes	
50-Resourceful URL helpers	
51-Read action - Index	
52-Read action - Show	
53-Form basics	
54-Create action - New	
55-Create action - Create	
56-Strong parameters	
57-Update actions - Edit_update	
58-Delete actions - Delete_destroy	
59-Flash hash	
60-Challenge - Pages and sections CRUD	
61-Solution - Pages and sections CRUD	
62-Layouts	
63-Partial templates	
64-Text helpers	
65-Number helpers	
66-Date and time helpers	
67-Custom helpers	
68-Sanitization helpers
69-Asset pipeline	
70-Stylesheets
71-JavaScript
72-JavaScript tag and sanitizing
73-Images
74-Form helpers
75-Form options helpers
76-Date and time form helpers
77-Form errors
78-Prevent cross-site request forgery
79-Validation methods
80-Write validations
81-Validates method
82-Custom validations
83-Cookies
84-Sessions
85-Controller filters
86-Logging
87-Authentication introduction	
88-Secure passwords
89-Create a controller for access
90-Login and logout.
91-Restrict access	
92-Challenge - AdminUser CRUD	
3-Solution - AdminUser CRUD	
94-Public area	95-Public area navigation	
96-Nesting pages in subjects	
97-Nesting sections in pages	
98-Adding RubyGems - acts_as_list	
99-Finishing touches
100-Next steps	

{

[IMPORTANT NOTES]
# If you're using something like memcached, restarting that may also be helpful
# after adding a gem it is good practice to restart you rails server
# rails g controller AdminUsers index, edit, new, delete must be plural because we working with resource that more then one 
# u have to mention explicitly in form method delete <%= form_for(@section, :url => section_path(@section), :method => 'delete') do |f| %> 


}