#2 ###########################################
otl:import 
it will run a import script and its import the data that the code needs

#3 ###########################################
oop language
1995 Yukihiro Matsumoto (Matz)
Framework::A set of code libraries and data-structures that provide generic functionality that can be used, overridden,or further specialized
 
#4 ###########################################
browser----web server-------------public folder-----routes-----controller<------->model------database
chrome-----puma,appace,enginX----				view

view[ActionView] , controller[ActionController] , model[ActiveRecord]
ActionView and ActionController are grouped togather in [ActionPack ]

#5 ###########################################
rails new cms -d mysql 
by default it gonna be sqlite 

#6 ###########################################
talked about gemfile bundle install
talked about directory structure 
config/application.rb = in this our genral application configuraiton 
initializers
environment

rails db:schema:dump go to the database and get the defination of database and dump it into a text file 

#7 ###########################################
talked about model view controller
helper help us to write in views
assets our js css all the things
mailer if our app send an mail or something 
job ????
channels action cable code here ?? 
db all our migration are here 
log all errors and information about app
vendor 3rd party code
lib your own code for reuse

#8 ###########################################
rails server nothing more 

#9 ###########################################
rails generate    it will give us the help that what can we built 
rails generate controller demo index .. view2 view3 demo is controller
make demo controller 
make demo folder and a view file index.html.erb in it in views folder
make route for index view 
make other files like scss js test etc

#10 ###########################################
if file found in public folder then it will never be hit the rails server 
we oftenly put a static pages in public folder like error 404 505 etc

#11 ###########################################
there are two primary types of http request GET AND POST
GET is when you enter or click a link and POST is when you submit the data through form

route types 

simple route 	
	get "demo/index" have to write index while in root route not 
	longer version 
		match "demo/index, :to => "demo#index",
		:via => :get
default route
	:controller/:action/:id
	posts/edit/3
	get ':controller(/:action(/:id))' the prenthisis make them optional in this case action and id are optional allows to be ommited
root route
	root 'demo#index' pound sign #  if nothing will match main page of your web
resourceful routes

#13 ###########################################

make a new view in demo folder and enter a routes in get 'demo/hello' and run 
run fine however we dont tell the controller what to view bydefault rails use his sense and lookup for the view in demo folder automatically
no hello action define in demoController yet he is smart enough
render(:template => 'demo/hello') short hand render('demo/hello')

#14 ###########################################
HTTP/1.1 302 Found redirect fuction webserver request to the browser that i want a different page 
ping pong effect

redirect_to(:controller => 'demo', action => 'index' if its in a same controller we can omit controller part
redirect_to('http://lynda.com')

#15 ###########################################
erb = embeded ruby
erb template
<% code %> process and execute ruby code
<%= code %> process and execute ruby code

<%= "hello #{name}" %> output hello zair

for debugging puts in rails its output in console

#16 ###########################################
var 
@var this is the instance variable 
if you want to render a page you should use a  @instance variable so that it can be accessible thats the only way the communication b/w controller and view 
@array in edit action can be access by edit.html.erb
in controller
def index 
	@array = [1,2,3,4,5]
	render('index')
end 
in view 
<% @array.each do |f| %>
	<%= f %> <br/>
<% end %>

#17 ###########################################
link
<a href="/demo/index">index page</a> this is the basic html link
<%= link_to(text,target) %> helper method  link_to just like above one 
<%= link_to(indexpage ,"/demo/index") %>
it can also be hash
{:controller => 'demo', :action => 'index'}

#18 ###########################################
url parameter
/demo/hello?page=3&id=20&name=zair query parameter
params[:id] symbol 
@id = params['id']string works the same 
@name = params[:page] params is always a string so if we want to go into next page @page+1 not work 
<%= link_to(indexpage , {:action => 'edit' , :page => 3, :id => 20, :name => 'zair' } ) %> 
becomes
localhost:3000/demo/hello?page=3&id=4&name=zair you can see page is not the part of url 
but if you use default routes then see what happens 
get ':controller(/:action(/:page))' now page is given special place in url like
demo/hello/3?id=20&name=zair 	NOTE DEPRICIATED
now we can use in view <%= @name %>
PARAMS IS ALWAYS A STRING NOTED THAT

#19 ###########################################
field intersaction of a column and row
always puts indexes on foreign keys
schema structural defination of a database complete index table etc

#20 ###########################################
SHOW DATABASES;
CREATE DATABASE db_name;
USE db_name;
DROP DATABASE db_name;

configfure project for a database
config/database.yml add database crenditial
to check if rails have access
rails db:schema:dump 

best practice make a new user and give him a privileges to that specific database
GRANT ALL PRIVILEDGES ON rails_cms.* TO 'username'@'localhost'  
IDENTIFIED BY 'password' (.* its a wild card means all the table within that database)
SHOW GRANTS FOR 'username'@'localhost';


#21 ###########################################
migration
set of database instrucition written in ruby
migrate from one state into another 

migration maintain the schema of database with our appliction code 
create the database instantly 
helps with versioning

#22 ###########################################
generate migration 
$- rails generate migration PostComment create a file which resides in db/migrate
def change is a short hand for up and down methods
def up method that we want to make changes
def down reverse the changes

#23 ###########################################
Model along with their migration
$- rails genreate model Post  should  be singular IMP NOTE

t.column "first_name", :string, :limit => 25
t.string "last_name" SHORTHAND
binary -boolean -date -datetime -decimal -float -integer -string -text -time
:limit ->size
:default ->value
:nulll -> true/false

:precision ->number
:scale ->number

create_table :users :id => false do |col| if we don't want to add id column by defoutl
col.column "name", :string, :limit =>40
t.string "email", :default => '' ,:null => false
if we have any name in our column then this two column automatically added
t.datetime "created_at"
t.datetime "updated_at"
short hand of this is 
t.timestamps

#24 ###########################################
rails db:migrate
rake change in rails in RoR5
mysql -u root -p rails_cms 
if dont give a database name you have to tell it after putting password like 
use rails_cms

SHOW FIELDS FROM users;

select * from schema_migration in this table migration version are save 
and track which migration is run already 

now what if we want to migrate run down
rails db:migrate VERSION=0  version should be in capital letters NOTICE
runs for all migration
all the code that is define in def down will execute drop the table that we just created 

to know about where is the migration is 
rails db:migrate:status will show you which migration is up or down
give you this after you run VERSION=0 you can take the migration ID from here
 Status   Migration ID    Migration Name
--------------------------------------------------
  down    20190720115841  Do nothing yet
  down    20190720150322  Create users
-------------------------------------------------
rails db:migrate VERSION=20190720150322 
up all the migration upto that in this case Do nothing yet and so on 
but if you want to up or down specific migration you will do like this 
rails db:migrate:down VERSION=20190720150322
rails db:migrate:up VERSION=20190720150322
rails db:migrate:redo VERSION=20190720150322 redo as the word bydefault the last version (migration)

# 25 ###########################################
TABLE MIGRATION METHOD
create_table(table, options) do |t|
	... columns...
end
drop_table(table)
rename_table(table, new_name) 

COLUMN MIGRATION MEHTOD
add_column(table,column,type, options)
remove_column(table, column)
rename_column(table, column, new_name)
chage_column(table, column, type, options)

INDEX MIGRATION METHOD
add_index(table, column, options) we can apply index more then one column by send an list of column in array
:unique => true/false
:name => "your_custom_name"

remove_index(table, column)

#26 MIGRATION PROBLEM  ###########################################
#27 MIGRATION PROBLEM SOLUTION ###########################################
#28 CHALLENGE CREATE MIGRATION ########################################### 

rails g model Subject.....Page....Section
adding code in migration 

#29 ACTIVERECORD AND ACTIVERELATION ###########################################

active record : design pattern for relational database
ActiveRecord Rails implementaion of active record pattern 
retrieve and manipultae data as objects .not as static rows
EXAMPLE OF ACTIVERECORD
user = User.new
user.first_name = "zair"
user.save # SQL INSERT

user.last_name = "umer"
user.save #SQL UPDATE

user.delete # SQL DELETE

AcitveRelation also known as ARel
object-oriented interpretation of relation algebra 
simplifies the genratioiion of complex database quires
small queruies are chainable 
complex joins and aggregation use efficient sql
queries do not execute until needed

EXAMPLE OF ACTIVE RELATION
users = User.where(:first_name => "zair")
users = users.order("last_name ASC").limit(5)

SELECT users.* FROM users 
WHERE users.first_name = "zair" 
ORDER BY users.last_name ASC 
LIMIT 5

#30 ###########################################
MODEL NAMING 
Names matter
all model inherit from ApplicationRecord which is inherit form ActiveRecord::Base and this is the core part of rails where we adding  behaviour to class
the commen code for all the model place in ApplictionRecord
table name maybe the same as model name and model class name
it is a ruby convention tough
but if you dont want to then no problem 

self.table_name = "admin_users"
or change the class name and file name too class AdminUser <- User and file name admin_user.rb <- user.rb 

#31 ###########################################
MODEL ATTRIBUTE
attr_accessor :first_name it is a short hand  for getter and setter function 
in a rails model when we inherit from ActionRecord::Base we gain alot of behaviour and ability that is built
in ActiveRecord::Base
FOR EXAMPLE it already know that where to locate the database table that correspond with the model and table columns 
give us setter and getter automatically and also know that how to type cast them correctly 
if visible is boolean its comes as boolean and goes as an boolean value

#32 ###########################################
THE RAILS CONSOLE 
irb 
raisl console development

#33 ###########################################
u = User.new
u.new_record?   # return true because yes this is not save to the database yet
or 
if u.save  puts "successfully insert"
p = Page.new(:name => "First Page", :permalink => 'first page', :position => 1)

#34 ###########################################
UPDATE RECORDS
u = User.find(3)
u.name = "zair" # and step by step 
s = Subject.find(4)
s.updated_attributes(:name => "zair", :visible => true)

#35 ###########################################
DELETE RECORDS
u = User.find(3)
u.destroy
u #return you the record even though that record is no longer in database for you inpection 

#36 ###########################################
FIND RECORDS
priamry key finder  
User.find(3)

dynamic finders 
User.find_by_name("First Subject") # return object or nil arais no error 
User.find_by(name: 'David')

User.all # return object or nil arais no error 
User.first # return object or nil arais no error 
User.last # return object or nil arais no error 

#37 ###########################################
QUERY METHODS
by string #Flexible but raw SQL
"name='test' AND visible= true"
"name='#{@name}' AND visible = true" #@name could be a point for sql injection 
by array 
["name=? AND visible = true","test"] santize it
hash
{:name => "test", "visible => true} safe
each key-value pair joined with AND
only work with equlality and ranges (34,354,[23,45,4]) whatever 
we don't have complex sql idea in FOR EXAMPLE OR, LIKE , LESS THAN OR GREATER THAN

can be chained up 
User.where(:lastn => 'umer').where(:firstn=>'zair')
User.where(:lastn => 'umer' , :firstn => 'zair')
where clause dont executes database imidiatly  execute in last when all the data is 
but no or like less than or greater than

#38 ###########################################
QUERY METHODS: ORDER, LIMIT AND OFFSET(skip the records)
User.order(:postition).limit(20).offset(40)
order("postion")
order(:postition => :asc) by default ascending
order("position ASC")

NOTICE you have to specify which table when you retrive a record from more than one table 
order("users.created_at ASC")

#39 ###########################################
NAMED SCOPE
queries defined in a model
defined using ActiveRelation query methods
can be called like ActiveRelation methods and can accepts parameters
rails 5 lamda syntax
scope :acitve, lambda {where(:active => true)}
scope :acitve -> {where(:active => true)} #staby lambda
same as method
def self.active
	where(:active => trur)
end

scope :newest_first, lambda {order("created_at DESC")
scope :search , lambda {|query| where(["name LIKE ?", "%#{query}%"])}
scope :with_content_type, lambda {|ctype|where(:active => ctype)}
def self.with_content_type(ctype)
	where(:content_type => ctype)
end
section.with_content_type('html')
both work in the same way the why we use lambda syntax?????????

scope :recent , lambda{
where(:created_at => 1.week.ago..Time.now)
}
evaluated
now in this example time.now in method will have the value(time)
when rails first boots up on the other hand scope have the value(time)
exact at the moment 
and for the chaining scopes 
var = Article.recent.visible.newest_first
much shorter and readable clear
when its call

#40 ###########################################
relationship 
all three

#41 ono-to-one ###########################################
has_one :page (in Subject model)
belongs_to :subject, {:foreign_key => 'foo_id'}  (in Page Model)   belongs_to :follower, foreign_key: :follower_id, class_name: "User"
we don't need to specifiy foregin key if we already made a column with the other table name 
like subject_id  

subject = subject.find(1)
subject id 1 name: "ror' postition: 1 visible true cre....
first_page = Page.new (:name => "first" :permalink => "first_page" :postion => 1)
return
page id nill subject_id:nil name: "first" permalink: "first_page" position: 1

subject.page = first_page 
it will add forign key
page id 2 subject_id:1 name: "first" permalink: "first_page" position: 1

now remove the association 
subject.page = nil
update 'page' SET 'subject_id' = nil where 'page'.'id' = 2 
or if you want to destroy 
subject.page.destroy

#42 one to many ###########################################
return array 
Subject has_many :pages
Page belongs_to :subject

subject.pages() return all the pages related to that subject
subject.pages << page if we want to add a page to a collection append opratore
subject.pages = [page,page,page] we have to defined every thing within the collecction
subject.pages.delete(page) if i want to delete a page and the object of the page that i want to delte
subject.pages.destroy(page) delete the page and accociation also 
subject.pages.clear to remove all pages 
subject.pages.empty? to know if array is empty
subject.pages.size return the no of pages 
create a page first_page 
then 
first_page have pageid and subject id is nil
s = Subject.find(2)
first_page = Page.new(:name => "First Page", :permalink => 'first' :postion => 1)
s.pages << first_page
but now, it have it

#43 belongs_to presence validation ###########################################
change in rails 5.0
belongs_to relationship is not optional by default 
an object that has belongs_to relationship could be save to the database
even it didn't have the parent object associate with it but not in rails 5
now ActiveRecord adds a validation for the object presence
means order can't be place witout a customer
you can disable it for rails 4 apps in configuraiton for entire application
Disable: {:optional => true}
if you create a new record and try to save it without the parent 
page.errors.full_messages  return ["subject must exist"]
belongs_to :subject,{:optional => true }
belongs_to page is not save until subject exist

#44 many to many association ###########################################

-require a join table 
(you can name this table anything you want but rails have a convention for this too
firstTable+_+secondTable 
-two foreign keys; index both keys together
-no primary key column (:id => false)
-add same instance methods to the class like one to many


plurals and alphabatical order and underscore
default name can be configured
Example

Project-collaborator
collaborators_projects

adminUser-page
admin_users_pages 

rails g migration CreateAdminUsersPagesJoin # create keyword rails convention understand that we want to create a table 

has_and_belongs_to_many :admin_users, :join_table => 'admin_users_pages' #if the table is out of rails conventions
#we can specify the join table if we do not follow rails convention

has_and_belongs_to_many :pages
#in admin_users.rb model

page = page.find(3)
me = AdminUser.new(:first_name => 'zair', :last_name => 'umer', :username => 'spy')
page.admin_users << me 
mysql> select * from admin_users_pages;
+---------------+---------+
| admin_user_id | page_id |
+---------------+---------+
|             2 |       3 |
+---------------+---------+

#45###########################################
MANY TO MANY ASSOCIATION :RICH
# here comes a breif explaination why we have rich join when we already have has_and_belongs_to_many reason is in this relationship we don't need any other columns we just want
# id of other two table but there is a case when we need other data too like if there are two tables 
# STUDENT(:id, :name,:phone)   COURSE(:id,:name) physics computer math now if we want to add some additional data like appearence of a student in a particular course or you
# could say marks they obtained then we have add these additional columns in join table and if we want to put some validations on it 
compared to many-to-many simple associations
-still uses a join table with two indexed foregin keys
-Requires a primary key column (:id)
-join table has its own **model**
-no table name conventions to follow 
-name ending in "-ments" or "ships" work well
like assignments - engagments - autherships - memberships 

AdminUser-Section (the idea everytime the admin made changes to the section we keep the track in table section_edits

AdminUser has_many :section_edits
Section has_many :section_edits

SectionEdit belongs_to :section
sectionEdit belongs_to :admin_user

rails g model SectionEdit

class SectionEdit < ApplicationRecord
    belongs_to :admin_user
    belongs_to :section
end
class AdminUser < ApplicationRecord
    has_many :section_edits
end
class Section < ApplicationRecord
    has_many :section_edits
end
sec = Section.create(:name => "Section One", position: 1)
p = Page.find(2)
p.sections << sec  # when you use append notation rails keep track for you ----------
edit = SectionEdit.new
sec.section_edits << edit ###### won't work becouse edit need user_admins too remember there are two belongs to and in rails 5 these are not optional so you should provide them in order to save
me = AdminUser.find(2)								     |
edit = SectionEdit.new(:summary => 'Test edit', :admin_user => me, :section => sec)  #  but when you create by direct table it will not update with the other related objects we have to reload them
edit.save
return 
INSERT INTO `section_edits` (`admin_user_id`, `section_id`, `summary`, `created_at`, `updated_at`) VALUES (2, 1, 'Test edit', '2019-07-22 01:46:17', '2019-07-22 01:46:17')
me.section_edits if it use its cache and giving you an error
me.section_edits(true) use this for reloading the object 
me.section_edits [#<SectionEdit id: 1, admin_user_id: 2, section_id: 4, summary: "test in edit_section", created_at: "2019-08-18 01:53:28", updated_at: "2019-08-18 01:53:28">]>
the query run for above command is [select 'section_edits'* from 'section_edits where 'section_edits'.'admin_user_id' = 2 ]
sec.section_edits [#<SectionEdit id: 1, admin_user_id: 2, section_id: 4, summary: "test in edit_section", created_at: "2019-08-18 01:53:28", updated_at: "2019-08-18 01:53:28">]>

#46###########################################
TRAVERSING A RICH ASSOCIATION
we created rich join between admin_users and section by using section_edits but we gain the ability and the complexity we now go trough to the extra step from one side of association 
to the other (like page.admin_users)  because we dont go direct to other now (:like section.admin_users )we have model between them now we do the extra step sec.section_edits.map{ |se| se.admin_users}
has_many :through
- allow us to "reaching across" a rich join
- treat rich join like an HABTM

create the model section_edits already created 

AdminUser has_many :section_edits
AdminUser has_many :sections :through => section_edits

Section has_many :section_edits
Section has_many :admin_users :through => section_edits

me.sections
#<ActiveRecord::Associations::CollectionProxy [#<Section id: 4, page_id: 4, name: "Cookie", position: 2, visible: true, content_type: "Text", content: "what if user disable the cookie then?", created_at: "2019-08-01 19:44:05", updated_at: "2019-08-03 21:39:37">]>
SELECT  `sections`.* FROM `sections` INNER JOIN `section_edits` ON `sections`.`id` = `section_edits`.`section_id` WHERE `section_edits`.`admin_user_id` = 2 LIMIT 11
me.sections.first.name == Cookie
now you can jump right into other association  like
me = AdminUser.find 2
me.section_edits


qasam ly lo jo samjh ai ho
??????????????????????????????????????????????????????????????????????????????????

#47###########################################
CRUD 
theory about crud
seprate controller for each Subjects, Pages , Sections #plural because we control all of our pages not just one page with that controller
allows for clear URLs
rails g controller Subjects index show new edit delete 


#48###########################################
REST
Representational State Transfer
do not perform procedure 
but Perform state transformations upon resources 

REST Paradigm Requirments
-1 Organize code into resources
Encourages one controller for each model
-2 Learn HTTP verbs for working with resources 
Determine which CRUD acitons are suited for each verb
-3 Map a new URL syntax to controller actions 
Change Rails routes
-4 Modify existing links and forms to use new URL syntax 
Use resourceful URL helpers

REST HTTP Verbs there are four
GET POST Patch Delete 

it fake true rest request by adding a hidden input field called _method and uses post as the method for the form
<form method="PATCH" action="/subjects/123">
#....
</form>
<form method="POST" action="/subjects/123">
	<input type="hidden" name="_method" value="patch" />
</form>

#49###########################################
Resourceful Routes
what we do is match routes or default routes we can use it for REST but 
then why Resourceful Routes 
-first it is Rails defualts
-Optimized for rest
-simple, consistent,organized structure 
-imporves application security
-Most pro use this

resources :subjects    <------ Resourceful Routes
resources :pages       Notice :: delete is not by default in it because it is optional want to show page or js popup your choice 
resources :sections

http method are now gonna determine which will execute
action show , update and destroy having the same url /subjects/:id
if its GET then show will run if its PATCH update will run and so on 

Limiting Resourcful Routes 
you don't have to define all the action on the resource 

resources :admin_users, :expect => [:show]
resources :products, :only => [:index, :show]
you can controll which should be given routes

Adding Resourceful Routes
it is also possible to add additional resources

resources :subject do 
	member do 
		get :delete # which accept record id in url like edit and update 
	end 
	collection do 
		get :export #it oprate on resource as whole they do not except record id like index , new , create 
	end 
end
#50###########################################
RESOURCEFUL URL HELPER
HTTP Verb + URL Helper combine 
{:controller => 'subjects', :action => 'show' , :id => 5}
subject_path(5) url helper
<%= link_to('All Subjects', subjects_path ) %>
<%= link_to('All subjects', subjects_path(:page => 3) %>
<%= link_to('Show Subject', subject_path(@subject.id) %> .id is optional rails is smart enough
<%= link_to('Show Subject', Subject_path(@subject.id , :format => 'verbose' )) %>
<%= link_to('Edit Subject', edit_subject_path(@subject.id)) %>

#51###########################################
READ ACTION index

<td class="center"><%= subject.visible ? 'Yes' : 'No' %></td>

#52###########################################
READ ACTION show

way to write URL
<%# link_to("Show", 'subjects#{subject.id}', :class => 'action show') %>
<%# link_to("Show", {:controller => 'subjects' , :action => 'show', :id => subject.id }, :class => 'action show') %>
<%= link_to("Show", subject_path(subject), :class => 'action show') %>
#53###########################################
FORM BASICS 
rails/erb vs html
+ any template code that can be written with rails/erb can also be written with simple HTML
+ Writing template code in rails/erb is almost always easier and more powerful than simple HTML
LOOK in cms-> views hello.html.erb comments or go end of this file brief explanation down there

#54###########################################
CREATE ACTION 

def create
    #steps
    + instantite a new object using form parameters
    + save object
    + if save succeed, redirects to the index action
    + if fails redisplay the form so user can fix the problems 

    #@subject = Subject.new(params[:subject]) #problem of mass assignment FORBIDEN ATTRIBUTES ERROR
    @subject = Subject.new(subject_params)

    if @subject.save
      redirect_to(subjects_path)
    else
      render('new') #render just form template having already @subject and populate with old values which have validation error
      #user don't have to enter all that valus again 
    end
  end

#56###########################################
Rails term for passing a hash of values to an object to be assigned as attributes
mass assignment will cause a problem 

LOOK in cms-> views hello.html.erb comments or go end of this file brief explanation down there #56
private # made a function because its use in many other actions for white listing and only require parameter are getting 
  def subject_params
    params.require(:subject).permit(:name, :position, :visible)
  end

#59###########################################
HTML stateless
Each request is distinct; no previous information. like you set the dark theme of youtube and set auto next off 
Cookies and sessions allow data between requests
Flash Hash 
+ stores message in session data
+ clears old messages after every request so that old message dont stick around 
+ they stick around for one redirect like "successfully deleted"
flash[:notice] = "successfully deleted" key-> "notice" message
flash[:error] = "not a valid value" 
notice 
you could assign whole ruby object to it but its not good practice and do not recommended
object can be large and take up lots of memory and if they are not taken up directly from the database they can be out0fdate?? or stail??
if you need to access lots of data then you should be storing it in database or in session file
flash is for only for short text that you want to save between request

#5.x###########################################
making crud for subject , page and section
#5.x###########################################

#62###########################################
by default if you not set to false layouts in controller it will use appliction.html.erb layout in view/layout
you can set it off by "layout false" 

but if you want to use a your specific layout 
first create it in view/layout admin.html.erb and go to that controller where you want to use 
and set layout 'admin'

now all your common code in page move to that template 'admin'
like
<% if !flash[:notice].blank?  # its check for the nil but also for the empty strings %>
    <%= flash[:notice] %>
  </div>
<% end %>

<title>Simple CMS: <%= @page_title || "Admin Area"</title>

Notice @variable in controller action available not just in the view/subjects/show but also in the template too admin.html.erb 
and not in sequecne manner  we set title in views but title tag are on the top 

#63###########################################
PARTIAL TEMPLATE
<%= form_for(@page, :url => pages_path, :method => 'post') do |f| %>
  <%# form_for(@subject) do |f|     we dont have to specify them becuase you are post something and see rails route %> 
    <%= render(:parital =>"form", :locals => {:f => f}) %>
    <%# partial reusable eletment notice in our form we use 'f' 
    its not gonna available their we have to send it %>
    <div class="form-buttons">
      <%= f.submit("Create Subject") %>
    </div>
  <% end %>

#64###########################################
TEXT HELPER
rails provide many helper method to do common tast in view template easiar

WORD_WRAP
store in variable or pullback from database 
<%= word_wrap(text, :line_width => 30 %>
make a line with 30 characters without breaking the word and put a /n in the end of a line 

SIMPLE_FORMAT
text = This is sample text/n with a line break."
<%= simple_format(text) %>
<p>This is sample text \n<be /> with a line break</p>

TRUNCATE 
<%= truncate(text, length => 18) %>
"This is sample text..."

PLURALIZE 
<% [0,1,2].each do |n| %>
<%= pluralize(n, 'product') %> found.<br />
<% end %>
 out put 
0 prodects found . <br/>
1 prodect found . <br/>
2 prodects found . <br/> 
and its is smart enough that person is persons and ox is oxens
more text helpers 
TRUNCATE_words  (truncate words instead of characters)
HIGHLIGHT (looks of keyprhase)
EXCERPT

#65###########################################
NUMBERS HELPER 
:delimiter , 
:serprator
:percetion
number_to_currency (24.4) = $24.40
	number_to_currency (2.4, :percision => 0, :unit => "rs", :format => "%n %u") 2 rs
number_to_percentage (34.5) 34.500 %
number_to_rounded ()
number_to_delimited (234234, :delimiter => '-') = 234-234
number_to_human (234234234) 234 Million
number_to_human_size (123467) 1.8MB 
number_to_phone (1231231233) = 123-123-1233
other conutry code and fully customized

#66###########################################
DATE AND TIME helpers
using integers
second seconds
minute minutes
hour hours
week weeks
month months
year years

Time.now + 30.days - 23.minutes 
Time.now - 30.days = 30.days.ago
Time.now + 30.days = 30.days.from_now	
next_week 
next_month etc check the docs
 
datetime.strftime(format_string )
Time.now.strftime( "%B  %d, %Y %H:%M") = "July 17, 2016 18:14"

symbol check the docs

:db 
:number
:time
:short
:long etc

#67###########################################
CUSTOM HELPERS
ruby modules 
app/helper when ever we created controller helper file with that name available corresponding view
apply on pages view visible outputing a green or red box upon visible status in css and html
these helpers are only for views 
USEFUL FOR

1- Frequently used code 
2- Storing complex code to simplify view templates
3- writing large sections of Ruby code

#68###########################################
SANITIZE HELPERS

cross-site scripting (XSS)
can be submitted via url parametersor web forms

evil = "<script>alert('You are Hacked!');</script>"
<%= evil %>
and we put this in our site witout sanitizing then it could harm

undesirable HTML 
comment = '<p> style="font-size: 100px; color: red;">i hate you</p></div>

<%=comment %> this will disturb our layout and messed up our design

so solution to this 
escape all user-entered data 
- url parameters
- form parameter
- cookie data 
- database data
ESCAPE METHODS
by default rails html_escape
html_escape()
h() its is by default now rails 3 < 
white list
raw() if we modify the string then its set it backs to the unsafe string
html_safe do the same thing but not modify remain the same 

escape output
strip_links(text) = remove links 
text = '<strong>Please</strong> visit
<a href="http://example.com">us</a>.'

strip_tags(html) = remove html tags only tags 

sanitize(html,options) remove all but only allowed which we are define in this 
sanitize(@subject.content, :tags => ['p', 'br', 'strong', 'em'] , :attributes => ['id', 'class', 'style'])

#69###########################################
ASSET PIPELINE

benifits
- concatenates CSS and JavaScript files  into a single file 
- compresses and minifies CSS and JavaScript remove white space and comments by using Gzip webserver supports that
- precompile CSS and JavaScript
- Allows writing asstes in other languages like coffee script and SASS
- Adds asset fingerprinting a clever way to force web brower keep cache up to date take the if the something change then md file is change so the name of file then he request for update assets
pipeline is preferd location is app/assets/.. but in public/.. pipeline benifts are no longer more and serve as static no cache busting no sass no coffee no compression no concatenates

MANIFEST FILES 
- contain directives for including assets files (which assets should be included and in what orders 
- Loaded, processed, concatenated, compressed
- Serve one file , but develop with many files

DEVELOPMENT VS PRODUCTION
DEVELOPMETN
- skip concatenation , comprassion , fingerprinting , and does file processing SASS and Coffee 
because in development changes are occur frequently thats why it does only file processing 

Production
its skip the assets pipling at all not even file processing 
rails assumes that assests have been precompiled for it 
and that is necessery step when we deploying 

Assets Pipeling 
app/assets/stylesheet/application.css -> 
make -> public/assets/applications-32434534c54b4r.css and public/assets/applicaiton-e2342f34c34.css.gz

how we do this precompilation
make sure our environment is set to production 
export RAILS_ENV = PRODUCITON
bundle exec rails assets:precompile 
most of the deployment system do it for your self if not you have to do it by your self	 

#70###########################################
write stylesheet 
location:
with asset pipeline :/app/assets/stylesheets
withpout asset pipeline :/pulic/stylesheets
filename: should end in ".css" ; SASS files end in ".css.scss" 

WHAT IS SASS? 
- "Syntactically Awesome Stylesheets"
- Scripting language which is interpreted into CSS
- Similer to CSS but with extra features 
like nested rules, variables , mixins , selector inheritance for more go to sass website 

$main_color = tomato;

#content {
  padding-left: 100px;
  padding-right: 100px;
  color: $main_color  	//<-------------
  a {   		//<-------------
  text-decoration: none;
  &:hover { text-decoration: underline; }//<---------------
	// & means a here equal to 
	// a:hover { text-decoration: underline; }
}
  h2 {
    width: 100%;
    text-align: center;
  }
}
in application.css
 *= require_tree . 	 // loads all of the file that included  stylesheet require_tree all the file . is current directory 
 *= require  primary 	// require primary style sheet which is our custom css
 *= require_self 	 // this is the directive that says that it should load in any style that we might happen to have in this file 
 */ these comment mean something
with equal sign are directives that tells the menifist file what it should load in 

 * require_tree .
 *= require primary 
 *= require admin_additions // made another manifist file here
 * now we have two different manifist files which results the two css and i can choose which one i want to load in     
 *= require_self
 */
 now we have to make sure that rails knows to precompiled this new css too
go to config/initializes/ assets.rb
-----------
# Precompile additional assets.
# application.js, application.css, and all non-JS/CSS in the app/assets
# folder are already added.
# Rails.application.config.assets.precompile += %w( admin.js admin.css ) //<----------
uncomment this 
-------------
STYLESHEET LINK TAG
HTML TAG
<link href="/assets/stylesheet/appliction.css" rel="stylesheet" type="text/css" media="all" />
RAILS HELPER 
<%= stylesheet_link_tag('application') %>
whats great is about helper method is it does more then this 
its know in which environment we are and adjust beahaviour accordingly 
# Defaults to :media => 'screen'

#71###########################################
same as stylesheet
- write javascript file
- List javascript file in manifist
- add manifist to asset precompile list
- include a javascript tag in html

location
with asset pipeline: /app/assets/javascripts
without assets pipeline: /public/javascripts

file name" end in ".js" CoffeeScript files end in ".coffee"

WHAT IS COFFEE SCRIPT 
Scripting language that is compiled into javascript 
different syntax (more concise, readable code)
more at http://coffeescript.org

jquery 
included by default 

cable.js (manifest file for getting the feature togather for using action cable not for begginers)

application.js (manifest file just css)
//= require jquery 
//= require jquery_ujs unutrasive javascript for rails 

//= require rails-ujs unutrasive javascript for rails 
//= require activestorage
//= require turbolinks (for more advance use)
//= require demo custom <------
//= require_tree .

javaScript Helper
HTML TAG 
<script src="/assets/javascrips/application.js" type="text/javascript"></script>
RAILS HELPER 
<%= javascript_include_tag('application') %>

#72 ###########################################

javascript helpers 
<%= javascript_tag("alert(Are you sure?');") %>

<%= javascript_tag do %>
	alert('Are you sure?');
<% end %>

you should sanitize your js

<%= javascript_tag("alert('you said : #{text}');") %>
by escape_javascript() or short form j()
<%= javascript_tag("alert('you said : #{j(text)}');") %>

#73 ###########################################


location
with asset pipeline: /app/assets/images (UI images should be here)
without assets pipeline: /public/images
User-uploaded images: /public/images (user-uploaded images should be here)

image upload gems 
paperclip and carrierWave

HTML
<image src="/assets/logo.png" />

RAILS HELPER
<%= image_tag('logo.png') %>

<%= image_tag('logo.png', :size => '40x40', alt => 'logo') %>
<%= image_tag('logo.png', :width => 70, :height => 40) %>
if you inspect this into browser you
<img alt="+" src="/assets/plus_sign-b7cc7f95073832695f7b3f55aad5782d185bb133bc5581bdf737931d9059822a.png" width="11" height="11">
fingerprint if this assets change then the finger print change also and force browser to get a new assets and burst the cache  


background: $light_brown image-url('/assets/footer_gradient.png') repeat-y 0 0;

#74 ###########################################
FORM HELPER
form helper comes with three diffrent styles 

<%= text_field_tag('name', params[:name]) %>		 
text style 
	[this is not the object aware so we have to provide the attributes and the values
	 exactly like we want to appear when it outputs in html when you only want to use rails code 
	instead of html search box which have not connecting to any object simple text input which we want to 
	sent to the controller]
<%= text_field(:subject, :name) %> 			 
object aware style () 
		[it is object aware  and it knows that the text input is related to the value of the subject 
		name attribute and its pre populate the values of subject ]
<%= f.text_field(:name) %> 				 
form builder style
		[ its function exactly the same as above one but it save as to type 'subject' over and over 
		again in every form helper suppose there are 10 text input fields you have to just put f.]

form_for(@subject, :html => {:multipart => true}) do |f| #form_for is smart enough if there is any file_field it automatically includes multipart 
  
  f.label(:name)
  f.text_field(:name, :size => 40, :maxlength => 40)
  f.password_field(:password, :size => 40)
  f.hidden_field (:token, 'af343krkerj34')

  f.text_area(:description, :size => "40x5") # :col and :rows

  f.radio_button(:content_type, "Text")
  f.radio_button(:content_type, "HTML")

  f.check_box(:visible)

  f.file_field(:logo) # requires :multipart => true 

end

#75###########################################

Form options Helpers select helper

select(object, attribute, choices, opitons, html_options)

Options:
:selected => Object.attribute
:include_blank => false
:prompt => false
:disable => false

form_for(@section) do |f|

#Range
f.select( :position, 1..5 )
#Array
f.select( :content_type, ['text', 'HTML'] )
#Hash 
f.select( :visible, { "visible" => 1, "Hidden" => 2 } )
#Array of arrays 
f.select( :page_id, Page.all.map {|p| [ p.name, p.id ]} )
end

and we are use this 

in controller 
@page_count = Page.count + 1
@subjects =  Subject.sorted

in view
<td><%= f.select(:subject_id, @subjects.map {|s| [s.name, s.id]}) %></td>

#76###########################################

Date and Time form helpers 

date_select(object, attribute, options, html_options)

Options:
:start_year => Time.now.year-5
:end_year => Time.now.year+5
:order => [:year, :month, :day]
:discard_year => false
:discard_month => false
:discard_day => false
:include_blank => false
:prompt => false 
:use_month_numbers => false
:add_month_numbers => false
:use_short_month => false
:date_serprator => ""

time_select(object, attributes, options, html_options)

Options:
:include_seconds => false 
:minute_step => 1
:include_blank => false 
:prompt => false
:time_separator => ":"

datetime_select(object,attribute, options, html_options)

Options:
# all date_select and time_select options 
:datetime_spearator => "-"

<%= f.datetime_select(:created_at, :order => [:month, :day, :year]) %>

#77###########################################
FORM ERROR

validates_presence_of :name
object.errors (Array containing any errors added by validations)

object.errors.clear
object.errors.size
object.errors.each {|attr, msg| ...} # :name, "can't be blank"

object.errors.full_messages.each {|msg| ...} #"Name can't be blank" full proper english 

displaying errors 
put output html in a partial 
app/views/applications/_error_messages.html.erb

call with a custom helper
error_messages_for(:object)

validates_presence_of :name

#78###########################################

CSRF (Cross-Site Request Forgery)
type of an attack a website
Exploits user's currently logged-in state to perform actions which require authentication
you close the browser without logging out hacker could send you this image and you not know that it send request 
to your bank
<img src="http://bank.com/transfer?amt=10000&to=hacker" />

PREVENT CSRF
-require user authentication
-Regularly log out inactive useres
-GET requests should be read-only
-Actions that expect POST requests should only respond to POST requests.

<form action="/subject/create" method="post">
   <input name="authenticity_token" type="hidden" value="DVSsdfdffs3DSF34" />
   #form fields
</form>

rails automaitcally add this hidden field in our form that generate from its form helpers 
and save it into your session too smart move so when a user something send it matches that it is valid form request and from valid user 
samrt move aan

our all controller inherit from ApplicationController

one more point here if you want to work with JS and AJAX request 
you need to have 
<%= csrf_meta_tag %>
tokken in your head of your hmtl page

#79###########################################
VALIDATIONS METHODS 

- ensure data meets requirements before saving to database
- we could validate our code in controller but this is not the good approach for specific action only 
  it much better that we enforce them globally 
- validation code resides in models
- ActiveRecord::Validations

methods 

validates_presence_of :name (sould not be nil,false,""," ",[],{}) :message =>"can't be blank" that you can customize 
validates_length_of (:is, :minimum, :maximum, :within, :in) :too_short , too_long, :wrong_length => "is the wrong lengthg (shoud be {{count}} charactrers)"
validates_numericality_of (must be integer or floating :equal_to :greater_than, :less_than, :greater_than_or_equal_to, :less_than_or_equal_to, :odd, :even, only_integer
validates_inclusion_of (attribute must be in a list of choices (array or range) :in 
validates_exclusion_of (opposite of above) :message => "is reserved"
validates_format_of (attribute must match a regular expression) :with :message => "is invalid"
validate_uniqueness_of (attribute must not exit in the database) :case_sensitive :scope :message => "has already been taken"
validete_acceptance_of (must checkbox check  like terms of condition virtual attribute not gonna save in database) :accept by default '1' :message => must be accepted
validate_confirmation_of (must be confirmed by entering it twice virtual attribute email or password confirmation) only run this validation when you have confimation on your form else it would be skiped  :message => doesn't match




validate_associated activeRecord association dependency 
- Associated object or objects - must all be valid
- First argument: association name; not attribute 
- does not fail if object does not exist 
- beware of infinit loops and long cascades
Options 
:allow_nill => true
:allow_blank => true  

:on => :save/ :create /:update  (on save this for both cases create and update)  
:if => :method/ :unless =>:method  
:method -- a method defined in the model that should return true or false

before_save { self.email = email.downcase }


#80###########################################
write validation

what to validate ? decide what good or bad data looks like 
what restrictions does your database impose?? field types, field length, and null allowed 
what would stop you application from working??

    validates_presence_of :email
    validates_length_of :email, :maximum => 100
    validates_format_of :email, :with => EMAIL_REGEX
    validates_confirmation_of :email

s = Subject.new
s.errors
s.errors.count
s.valid? output blank every time s.valid? call it update the s.errors
all activeRecord objects have this model 

s.email = "zair@blog.com"
s.email_confirmation = "umer@blog.com"
s.valid? output false message Email confirmation doesn't match Email 

#81###########################################
VALIDATES METHODS
short methods to do the same things as above also called
sexy validations 
    validates_presence_of :email
    validates_length_of :email, :maximum => 100
    validates_format_of :email, :with => EMAIL_REGEX
    validates_confirmation_of :email
like this
validates :email :presence => true,
		 :length => { :maximum => 50},
		 :uniqueness => true, 
		 :format => { :with => EMAIL_REGEX },
	 	 :confirmation => true

validates :attributes,  :presence => boolean,
			:numerically => boolean,
			:length => options_hash
			:format => {:with => regex},
			:inclusion => {:in => array_or_range}, # or you can dirsect send array and skip the :in 
			:exclusion => {:in => array_or_range},
			:acceptane => boolean,
			:uniqueness => booleanm
			:confirmation => boolean

#82###########################################
CUSTOM VALIDATIONS

validate : custom_method

private

def custom_method
	if test_case 
		errors.add(:attribute, "message")
	end
end
implemetn in admin_user.rb
all in one model
FORBIDDEN_USERNAME = ['fucker','mary','santa'] # just for sake of demonstration
validate :username_is_allowed # custom validation
private

def username_is_allowed
    if FORBIDDEN_USERNAME.include?(username)
        errrors.add(:username, "has been restricted from use.") use :base if you don't want to or have variable name in your message
    end
end

#83###########################################
COOKIES
web is a stateless environment 
web server doesn't know the previous record 
cookies help us here allow us to preserve "state"
web server sends data to the browser to save data in cookies 
Browser sends cookie data with each future request to the web server

cookies[:username] = "zair"
cookies[:username] = {
	:value => "zair",
	:expires => 1.week.from_now
}

<%= cookies[:username] %>

maximum size is 4K 4000 characters 
resides on the user's computer 

should be preserve state and save time 
store only small pieces of data
do not store sensitive data 
do not trust cookie data 


#84###########################################
SESSIONS
help us to address the same problem that cookies do
the way session works web server sends a session ID to the browser, which then saves it in a cookie 
so session use cookies to do their job
browser sends session ID with each future request to that web server
then web server uses session ID to locate the session file 
session store in server side 

session[:username] = "jsmith"
<%= session[:username] %>

Limitations of sessions 
Require time to retrieve the session file
session files accumulate over time every time a new user arrive to the site web server generate session for him
either in a file or store in database
session cookie can be deleted or hijacked can be steal session id and pretend to be that user 

session storage
*file storage 
*database storage 
*cookie storage in rails 3 
default since rails 3
super cookie (encrypted to prevent reading  , signed to prevent tampering, 4k maximum size )
fast, no lookup needed
no setup required 
no file or database bloat

session storage configuration 

config/initialzers/session_store.rb
config/secrets.yml

#85###########################################
CONTROLLER FILTERS

execute code before or after a controller aciton 
filter request before allowing acitons
remove code repetition 
perform "housekeeping" tasks 

Usages 
confirm user authentication 
set variables and default values 
find database objects 
get shopping cart 

before_action 
after_action
around_action (combo of above two)

before_action :find_subjects , :only => [:new, :create, :edit, :update]

private def find_subjects 
 @subjects = Subject.sorted 
end


filter mehtod should be declared "private"
any render or redirect before an action prevents its execution.
specify which actions activate the filter with:
:only => [:index, :new]
:except => [:edit, :delte]

filters in ApplicationController are inherited by all controllers
inherited filter can be skipped 
skip_before_aciton 
skip_after_aciton

#86###########################################

LOGGING
Sever Logs vs Application Logs 
basic request data and the error which occur before the rails application are going to show in server logs 
but web server only know about the request the send in and the data it sends back 
once he send the error to rails application the rest will remain mystry for web server 

log/development.rb
log/production.rb
log/test.rb

log level configuration
development.rb 
config.log_level = :debug , :info , :warn, :error , :fatal
production.rb 
config.log_level = :info 

rails log:clear

logger.debug(" ### the name is #{@Subject.name} ###")


#87###########################################
AUTHENTICATION INTRODUCTION

like admin can only see the page of all users list 

why authentication??
password-protected areas are commen
examining best pracitces helps avoid costly mistakes
development choices and security concernse intertwined
opportunity to explore some important feature in rails 

if the password is match 
sets session varitable to the user ID
redirect to a post-login page 
if the user want to access password protected pages then
session data available with each request
Log out 
set user ID stored in session variable to NULL


#88###########################################
SECURE PASSWORDS

encrypting passwords 
never store passwords in plain text

one way encryptions 
rails uses Blowfish 

has_secure_password 
prerequisites 
bcrypt gem installed 
column in database 'password_digest'

has_secure_password 
attr_reader :password 
validates_presence_of :password, :on => :create
validates_confirmation_of :password 

def authenticate(unencrypted_password) #magic methods that will available to us 
end

u = Admin.first
u.password_digest = "zair"
=> "$jerkltj34534er" #encrypted string
u.save 
=> false email is blank 
u.save true 
u.authenticate("zairUmer")  false

#89###########################################
create user access like devise
  get 'access/menu' #index
  get 'access/login' #new
  post 'access/attemp_login' # create
  get 'access/logout' #destroy
  
  get 'admin', :to => 'access#menu'

#90###########################################
LOGIN AND LOGOUT

#91###########################################
RESTRICT ACCESS

*Add before_action to each controller
Be careful not to forget any 
*Move before_action to ActionController
must skip_before_action in public controller
*Create AdminAreaController

before_action :confirm_logged_in #see the applicationController 

private
  
  def confirm_logged_in
    unless session[:user_id]
      flash[:notic] = "Please Login"
       redirect_to(access_login_path) 
       #we want not to show any other controller action unless user is login 
       #if that is the case we should move this to our main applicationController and 
       #add this line there before_action :confirm_logged_in, :except => [:login, :attempt_login, :logout]
    end
  end

#92###########################################

#95###########################################
PUbLIC AREA NAVIGATION

<% subjects ||= [] %>    default to emtpy array 
we are expecting array of subjects that we can go trough but if somereason we don't have subjects default to emtpy array 

<% subject.pages.visible.sorted.each do |page| %>
      <li><%= link_to_unless_current(page.name, public_show_path(page.permalink)) %></li>
      <!-- so smart of rails -->
#96###########################################
(:subject_id => @subject.id) 
in every redirect and form
<%= form_for(@page, :url => pages_path(:subject_id => @subject.id), :method => 'post') do |f| %>
we want to track subject.id 

#97###########################################
a good case see in section form view 

<td><%= f.select(:page_id, @pages.map {|s| [s.name, s.id]}) %></td>
        <!-- 
          we have three options here in edit or new 
          user can choose the page and jump around 
          we can disable this options 
          we can remove and show a page name only because user go to that specific subject and then specific page and then can create the section 
          so i think it is good option for remove it at all and replace select tag with this one below but personally i dont want to :) badmashi
          
          
          -->
        <!-- f.object.page.name 
            and this is not just it we no have to remove this by params list because it is not going from form any more page or subject 
            so we have to mention in give subject id or page id at creataion of new page or section in controller 
            like @page.subject_id = @subject.id     or in short form 
            @page.subject = subject     do the work for us       and can remove a before action :find_subjects  that is there for select option 
            
            now i am changing my mind because we have to hit data base just for this or i have a new approach why not i do pass the subjects parameters 
            but i think then i have to maintain the status of it 
        
        -->
#98###########################################
i am creating a new section and it gives me a position for select out of 7 
but on that page i have only two how to tackle this 
def set_page_count
    #@page_count = Page.count
    @page_count = @subject.pages.count
    if params[:action] ==  'new' || params[:action] == 'create'
      @page_count += 1
    end
  end
this will solve the problem but now position can be repeatable  means there can be two pages with the same position how we prevent that 
one solution is client side and server side validation but this is not the good approach because then user have to try every one of the position to see which is free 

best practice is that if its is common problem then you should look for gem
there are some of the gem 
 
act_as_list  		manage objects with positions 
will_pagination  	pagination
exeption_notificaion	send email when errors occur
paperclip		manage file uploaded via web forms
carrierwave		manage file uploaded via web forms
delayed_job 		Queue tasks to run later
friendly_id 		Semantic URL
acitivemerchant		credit card processing

===================================================================================
gem install mysql2 -- --with-mysql-config="D:\server\mysql\bin" --with-mysql-include="D:\server\apache2\include" --with-mysql-lib="D:\server\apache2\lib"
\q: Quit/Exit.
\c __database__: Connect to a database.
\d __table__: Show table definition including triggers.
\dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones).
\l: List databases.
\dn: List schemas.
\df: List functions.
\dv: List views.
\df+ __function__ : Show function SQL code.
\x: Pretty-format query results instead of the not-so-useful ASCII tables.

"it may sound like tough love,
but look, if at some point you got lied to, it's because you agree to get lied to.
lying's is a coperative act"

everyone is willing to give you something 
they are ready to give you something for whatever it is, they're hungry for. and that is the crux of it



===================================================================================
Go to: https://www.lynda.com/portal/sip?org=houstonlibrary.org
lib#: 2037471
pass: akosikevin215
https://www.lynda.com/learning-paths/Web/become-a-ruby-on-rails-developer

=======================================
cms- >>view/hello.html.erb 

=begin%>
  
  params[:desig]
  params[:name]
  params[:email]..and we want to save it in a data base
  
INSERT IN THE DATABASE PAIN IN THE ASS
	subject = Subject.new({:designation => params[:desig], :name => params[:name], :email => params[:email] } )
	that is not a good way it is tedious to build up that hash by grabing each parameter by name

so suppose if we have 50 inputs fields in our  form then !!  na karo raja G
	
	solution HTML Form arrYS

	<form action='/subjects' method='post'>
		<input type="text" name="subject[desig]"/>
		<input type="text" name="subject[name]"/>
		<input type="text" name="subject[email]"/>

		<input type="submit" value="Create Subject"/>
	</form>
now we have
	params[:subject][:desig]
  	params[:subject][:name]
  	params[:subject][:email]

INSERT IN THE DATA BASE NOW 
subject = Subject.new(params[:subject]) its that easy!!!  na kr qasam kha 
params[:subject] = {:desig => 'coder hai bahi', :name =>'umer' , :email => 'lala@blog.com' }
now we no longer have to built hash ourselves form does it for us 


local code block variable |f| is a form builder object and its knows subject
pros is it save object then update else new  action 
if its exist it will prepopulate the fields with the existing values

<%= form_for(@subject) do |f| %>
	<%= f.text_field(:desig) %>
	<%= f.text_field(:name) %>
	<%= f.text_field(:email) %>
	
	<%= f.submit("Create Subject") %>
#56
	but bad news this is called mass assignment 
	Subject.new(params[:subject]) because we are just dumping the into the object 
	consider this exaple 
	@user.update_attributes({:username => "zair"})
	but hacker able to replace fake version of a form that have extra fields show up in our form parameters 
	@user.update_attributes({:username => "zair",:password => "notsecret", :admin => true})

	rails v1 and v2 : blacklisting of attributes
	rails v3 : whitelisting of attributes
	rails v4-5: strong parameters

	params.permit(:name, :email) white listing means that two only available for mass assignment and others are not 
	params.require(:subject) ensure that parameter is present not permiting just to sure value is there

	params.require(:subject).permit(:name, :position, :visible)



<% end %>

<%
=end%>


1-Welcome	
2-How to use the exercise files	
3-Ruby on Rails introduction	
4-Understanding MVC architecture	
5-Create a project	
6-Configure a project	
7-File structure of a project	
8-Access a project	
9-Generate a controller and view	
10-Server request handling	
11-Routes	
12-Experiment on your own	
13-Render a template	
14-Redirect actions	
15-View templates	
16-Instance variables	
17-Links	
18-URL parameters	
19-Introduction to databases	
20-Create a database	
21-Migrations	
22-Generate migrations	
23-Generate models.mp4	
24-Run migrations	
25-Migration methods	
26-Solve migration problems	
27-Challenge - Migrations for the CMS	
28-Solution - Migrations for the CMS	
29-ActiveRecord and ActiveRelation	
30-Model naming	31-Model attributes	
32-The Rails console	
33-Create records	
34-Update records	
35-Delete records	
36-Find records	
37-Query methods - Conditions	
38-Query methods - Order, limit,  and offset	
39-Named scopes	40-Relationship types	
41-One-to-one associations	
42-One-to-many associations	
43-belongs_to presence validation	
44-Many-to-many associations - Simple	
45-Many-to-many associations - Rich	
46-Traverse a rich association	
47-CRUD	48-REST	49-Resourceful routes	
50-Resourceful URL helpers	
51-Read action - Index	
52-Read action - Show	
53-Form basics	
54-Create action - New	
55-Create action - Create	
56-Strong parameters	
57-Update actions - Edit_update	
58-Delete actions - Delete_destroy	
59-Flash hash	
60-Challenge - Pages and sections CRUD	
61-Solution - Pages and sections CRUD	
62-Layouts	
63-Partial templates	
64-Text helpers	
65-Number helpers	
66-Date and time helpers	
67-Custom helpers	
68-Sanitization helpers
69-Asset pipeline	
70-Stylesheets
71-JavaScript
72-JavaScript tag and sanitizing
73-Images
74-Form helpers
75-Form options helpers
76-Date and time form helpers
77-Form errors
78-Prevent cross-site request forgery
79-Validation methods
80-Write validations
81-Validates method
82-Custom validations
83-Cookies
84-Sessions
85-Controller filters
86-Logging
87-Authentication introduction	
88-Secure passwords
89-Create a controller for access
90-Login and logout.
91-Restrict access	
92-Challenge - AdminUser CRUD	
3-Solution - AdminUser CRUD	
94-Public area	95-Public area navigation	
96-Nesting pages in subjects	
97-Nesting sections in pages	
98-Adding RubyGems - acts_as_list	
99-Finishing touches
100-Next steps	


{
[debuging]

<%= debug(params) if Rails.env.development? %>

}

{

[IMPORTANT NOTES]

# If you're using something like memcached, restarting that may also be helpful
# after adding a gem it is good practice to restart you rails server
# rails g controller AdminUsers index, edit, new, delete must be plural because we working with resource that more then one 
# u have to mention explicitly in form method delete <%= form_for(@section, :url => section_path(@section), :method => 'delete') do |f| %> 
# a.reverse! bang operator will change the origenal  array else not
# (0..25).to_a create an array having no from 0 to 25 
# y= (0..99).to_a.shuffle! creates but shuffle
# ApplicationController if there are general methods which used in all your others controller or views over and over again like
# rails not allowed name id to any non primary column
# new VS create] new is for GET request REST and only intitiate object not saved in db while create is POST request REST initiate object and save it in db
# delete VS Destroy] Delete is only just like SQL delete no Active Record objects are instantiated so object callbacks are not executed before_destroy etc including any :dependent association options
# CRUD Callbacks
- before_create         - before_update            - before_destroy
- around_create         - around_update            - around_destroy
- after_create          - after_update             - after_destroy
}
# ActiveRecord VS ActiveRelation 
all queries that yield multiple records like scopes, all, where, and joins return an ActiveRecord::Relation object. You can chain these together, and it is only when you use a method like to_sql, first, each, any, to_a, 
# Named Scopes VS Default Scopes
[BEST PRACTICES]
{
# current_user, logged_in?, require_user etc define in Application controller and tell the rails that they are helper methods 
# [ helper_method :current_user, :logged_in? ] in Application controller so rails available these mehtods in our views too
def current_user
	User.find(session[:user_id)] if session[user_id] // the problem is that whenever we want user object it will hit  database every time remedy to this is memoiztion 
	@current_user ||= User.find(session[:user_id)] if session[user_id] // this is the optime approach we hit the database only the first time 
end
}


[Associations RELATIONSHIP]
{
+-----------------------------+
|    select * from Subjects;  |
+----+-------------+----------+
| id | name        | position |
+----+-------------+----------+
|  1 | Programming |        1 |
|  2 | cooking     |        3 |
|  3 | Cyberpunk   |        2 |
+----+-------------+----------+
+---------------------------------+
|	select * from pages;      |
+----+------------+---------------+
| id | subject_id | name          |
+----+------------+---------------+
|  1 |          1 | Ruby On Rails |
|  2 |          1 | React         |
|  3 |          3 | Security      |
|  4 |          3 | Optimize      |
|  5 |          2 | Biryani       |
+----+------------+---------------+
----------------------------------------
HAS_MANY AND BELONGS_TO (one to many)
rails generate migration AddSubjectIdToPages subject_id:integer
----------------------------------------
class Subject < ApplicationRecord
    has_many :pages #child
end

class Page < ApplicationRecord
    # subject father #forgin key in page table always in belongs_to
    belongs_to :subject , { :optional => false }  	# make it false if you want to add page without a parent object subject 
end

pg = Page.first		[retrun the first page]
			#<Page id: 1, subject_id: 1, name: "Ruby On Rails">
pg.subject 		[return the subject object which this page is belongs to]
			#<Subject id: 1, name: "Programming", position: 1>

sub = Subject.first 	[return the first subject]
			#<Subject id: 1, name: "Programming", position: 1>
sub.pages		[return the all pages which belongs to this subject]		
			#<ActiveRecord::Associations::CollectionProxy [
			#<Page id: 1, subject_id: 1, name: "Ruby On Rails">, 
			#<Page id: 2, subject_id: 1, name: "React">]>
sub.pages.count		=> 2
pg.subject.pages.count  => 2    [we did the same thing but now from the Page object]
----------------------------------------
----------------------------------------
HAS_MANY THROUGH (many to many)
rails generate model Like user_id:integer product_id:integer
----------------------------------------
class Like < ActiveRecord::Base
  belongs_to :user
  belongs_to :product
end

class User < ActiveRecord::Base
  has_many :likes
  has_many :liked_products, through: :likes, source: :product   #has_many :products, through: :likes
end

class Product < ActiveRecord::Base
  has_many :likes
end

prod1 = Product.first
prod1.likes # returns prod1's likes
user1 = User.first
user1.likes #returns user1's likes
user1.liked_products # returns user1's liked products
----------------------------------------
----------------------------------------
HAS_ONE AND BELONGS_TO (one to one)
rails generate migration AddUserIdToCarts user_id:integer
----------------------------------------

class User < ActiveRecord::Base
  has_one :cart
end

class Cart < ActiveRecord::Base
  # User father #forgin key in page table always in belongs_to
  belongs_to :user
end

user1 = User.first
user.cart # return's user1's cart
cart1 = Cart.first
cart1.user #return's cart1's user
[NO Rocket Science Here]
------------------------------------------


}

[ACTIVE RECORD]
{
==Product.where(quantity: 2..5)
Sometimes, you'll need to pass in a string condition to .where which will be directly converted into SQL:
==Product.where('quantity > 3')
==Category.joins(:products)
SELECT "products".* FROM "products" INNER JOIN "categories" ON "categories"."id" = "products"."category_id"

==Product.joins(:category)	You can also run the query in reverse:
==Product.joins(:category, :likes).uniq
SELECT DISTINCT "products".* FROM "products" INNER JOIN "categories" ON "categories"."id" = "products"."category_id" INNER JOIN "likes" ON "likes"."product_id" = "products"."id"
==Category.joins(:products).where(products: {quantity: 0})
SELECT "categories".* FROM "categories" INNER JOIN "products" ON "products"."category_id" = "categories"."id" WHERE "products"."quantity" = ? [["quantity", 0]]
==Category.joins(:products).where('products.quantity > 3')
SELECT "categories".* FROM "categories" INNER JOIN "products" ON "products"."category_id" = "categories"."id" WHERE (products.quantity > 3)
}

for something  so bad to be so good
and something so good to be so bad

=================================================================
=================================================================
=================================================================
getting more from Active Record

######################################======>create a database
create new user Mysql 

GRANT ALL PRIVILEGES ON *.*
TO 'rails_user'@localhost' 
INDENTIFIED BY 'secretpassword'

only connect with this local machine 
*.* access to all database like admin

rails new blog -d mysql

mysql> SHOW DATABASES LIKE 'blog';

in database.yml 
development: 
	<<*default #// this means it is inherit from default configuration 
	database: blog_development 
	username: superroot #//override this 
	password: admin

#########################################======>migration shortcut
use command line to pre-populate migrations with on single command instead of going into that migration
rails g model Product name:string inventory:integer 'price:decimal{7,2}' description:text restocked_at:datetime 
#// percision 7 and scale 2

by default rails create a timestamp for you created_at updated_at but if you want to remove them
rails g model Product --no-timestamps

rails g migration AddQtySoldToProducts qty_sold:integer
[add_column :products, :qty_sold, :integer]

rails g migration AddRefNumToProducts ref_num:string:index #//apply index on that column
[add_column :products, :ref_num, :string
add_index :products, :ref_num]

rails g migration AddStyleToProducts style:references
[add_reference :product, :style, foreign_key: true]

#########################################======>the change method 
change is alternative for up and down methods in migration 
So up has all the code that we need when we want to migrate up and down has all the code when we want to migrate back down.

rails is smart enough to reverse the process 
change method support

create_tabe
add_column
add_index
add_foreign_key
add_reference
add_timestamps
rename_table
rename_column
rename_index
drop_table * have to give a full defination for reverse it you know it
remove_column * because when we want to revere of this how he know the type of column so we should give a datatypes
remove_index
remove_foreign_key
remove_reference
remove_timestamps

#########################################======>write reversible code
yayayayyaayya

#########################################======>irreversible migration
yayayayyayaya
not posible because of data lose that we can't return 

Raise ActiveRecord::IrreversibleMigration

#########################################======>revert migration
return to a previous state 
Migrations work the same way, and they can be reverted as well. This is different than when we're running rails db migrate and we're simply moving up and down.

In those cases, we're just doing it locally, and we're controlling how our database looks. 
With reverting, what we're doing is we're creating a new migration file, putting 
code in it that says to do the revert and then adding that to our application permanently.

require_relative '201901214173284_add)price'
class RevertAddPrice < ActiveRecord::Migration[5.0]
	def change
		revert AddPriceToProduct #// name of previous class name
	end
end
#// It's a lot easier than having to actually write out the code of all the things that you wanted to change. You can just point it to the file, and say, hey, do the opposite of that.

#########################################======>create a join table
I'm talking about is a simple join, a simple join that's just between two models. It's not what I call a rich join, 
where you actually have a model that joins together two other models. 
This is just a simple table that defines a has and belongs to many relationship between two models. 

By default, Rails would want to have a join table that was named mailing_lists_users. 
That is the name of those two models pluralized and put in alphabetical order with an underscore between them. That's the Rails default for what this table should be named

def change
	create_table :mailing_lists_users, :id => false do |t|
		t.references :mailing_list, :index => true
		t.references :user, :index => true
	end
end
that the old way of doing it

def change
	create_join_table :mailing_lists, :users
	#supress the id and put the index automatically 
end


rails g migration CreateJoinTableMailingListUser mailing_list user
CreateJoinTable should be start with this then two models and then column names

#########################################======>control migration output
puts "message"
say "message", indent=true
verbose 
supress messages restrict

#########################################======>dump the database schema

we will discuss database schema files and how to use them effectively. 
A database schema file is the structural definition of the database. It's like a blueprint of how the database is constructed. 
Ruby on Rails migrations automatically generate and store a new schema file for 
you after the migrations have been run. That file represents the current state of the database

provide a quick view of the database structure 
better to load schema than run all migration 

what they can do is just jump to the ending and load in that schema file which is the end result. That's the content that they actually want anyway.
There's no reason that we have to build it step by step 

every time we run our migrations, Rails is going to regenerate that schema file for us. 
That regeneration and saving of that file is called dumping the schema. We can also do it manually from the command line with 
rails db:schema:dump. 

If you want to do the reverse and load in an existing schema file that resides in that location in that directory, you would use rails db:schema:load
rails db:create
rails db:schema:load

if you want an sql format with
rails db:structure:load or dump

#########################################======>define seed data
Seed data is an initial set of data for an application and it's usually the minimum data 
required to make the application work properly or to put it in a good state so we can begin developing. It's useful when we want to initialize a new application.
rails db:seed #// will populate db with some of initial data

#########################################======>create records with a block
product = Product.new(
	:name => 'jacket',
	:price => 43.54
)
product.save

product = Product.new do |p|
	p.name = 'jacket',
	p.price = 43.54
end	#// give more power like do the calculation in this block and more neat
product.save

#########################################======>update multiple records
Product.update_attributes(:name, 'zair')
product.update(:name,'zair') interchangeable single record update

@product.each do |p|
	p.update(:visible =>true)
end
if the record is 2000 then there will be 2000 call to the db 

Product.update_all(:visible => true) one sql 
Product.where(:flag => false).update_all(:visible => true) or you can scope them like recent
this approach is much faster but
no model instances
no callbacks 
no validations 

#########################################======>delete multiple records
product.destroy
product.delete
 it will create the SQL statement that it needs to delete the record from the database and it will also run any of the code that's inside the model associated with deleting it; callbacks, for example.

The alternative to this is to use delete. We have an instance of the object and we call delete on it. Now it's easy to get these confused but they're not the same thing. Delete simply uses the existing object in order to get its ID and from that ID, it's going to create an SQL statement that it can send to the database. It's not going to run any associated ruby code.

Product.destroy(23)
Product.destroy([23,34,23])
Product.outdated.delete_all

#########################################======>touch records
@product.touch #// note: validation are not performed 
@product.touch(:sold_out_at) #// if you want to update specific column
use case for this 
if we have association tag and product 
and we create or update tag then touch product

#########################################======>toggle attribute values
blog_post.published?
flip the boolean to the opposite
blog_post.toggle(:published)
blog_post.toggle!(:published) #// bang oprator for permenent save db

#########################################======>increment and decrement counter
@procuct.qty_sold = @product.qty_sold + 1
@product.increment(:qty_sold)
@product.increment!(:qty_sold) #// bang oprator for permenent save db
@product.increment(:qty_sold,5) 5 increament 

//note: This technique works well for simple counters which are not related to associated objects. If you wanted to keep a running count of the related records, you would want to use a counter cache instead,

#########################################======>Track changes to objects
Dirty objects = has changes which have not been saved in db
product = Product.first
product.changed? if the object retirive from db is still the same then its return false

product.name = "green"
product.changed? #true
product.changed # ["name"]

product.changes
#{"name" => ["Blue" , "green"]} return hash with old and new value of that attribute 

product.changed_attributes
#{"name" => "Blue"} the orignal and old value

#########################################======>Track changes to attributes

product = Product.create(
	:name=> "couch",
	:qty_sold => 5 )

prodcut.name = "sofa"
hey name attribute have you change we can track that by magic fucntion
prodcut.name_changed? #true
#product.name_change ["couch","sofa"]

product.restore_attributes #// restore the product.name to its orignal or old values

#########################################======>other find methods
find_by just like where but instead of return an array it return us object
Product.find_by(:name => 'couch')
Product.where(:name => 'couch')
Product.find_by_name('couch')
Product.find_by_name_and_price('couch',400)

Category.find_or_initialize_by 
Category.find_or_create_by(:category => "Tech")

[exist, any many] to see weather the date is exist in our database not to retrive thoug
Product.where(:name => 'couch) #
Product.exist?(:name => 'couch') you can;t chain it like up above where
and you can't use string with it it gives you wrong data 
like this  Product.exist?("price >= 100")

Product.where(:name => 'couch').any?  #one or more
Product.where(:name => 'couch').many?  #two or more

#########################################======>select partial record data
select partial record data

Product.recent.select(:id,:name) #array of objects there is a gotcha it behave like an object but it only contain the attribuets that you ask for 
Product.recent.pluck(:name) # return array
Product.recent.ids #shorthand for Product.recent.pluck(:id)

#########################################======>calculations
Product.count
Product.where("price >= 20").count 
Product.sum(:price)
Product.average(:price)
Product.minimum(:price)
Product.maximum(:price)

#########################################======>Negative queries
fresh = User.recent.pluck(:username) // make an array here for fresh students 
Product.where.not(:username => fresh) // and pass it here

#########################################======>Or queries
Post.where("is_deleted = 'yes'").where("role = 'admin'") AND both must be true
Post.where("is_deleted = 'yes'").or(Post.where("role = 'admin'")

with scope also 
Post.published.or(Post.pending).or(Post.recent) # note: left to right

WARNING
must be an ActiveRecord::Relation a (either query or scope)
must be the same modal
must differ only by #where or #having
should not use limit offset distinct // because they will be ignore automatically

#########################################======>Retrieve records in batches
find_each
find_in_batches
in_batches

# normally way to do Productj.all 
Product.all.each do |pro|
	pro.recalculate_inventory
end

#in this case, it's going to find the first 1,000 product records, and yield those up to the block.
Product.find_each do |pro|
	pro.recalculate_inventory
end

#you can make the batch size what ever you want
Product.find_each(:batch_size => 100, :start => 500, :finish => 1000 do |pro|
	pro.recalculate_inventory
end

# Find_in_batches does the same thing, but instead of rendering up each one of the products to the block, it yields up the entire batch. 
# and return list of array instead of objects

Product.find_in_batches do |batch|
  sleep 5
  batch.each do |pro|
	pro.recalculate_inventory  
  end
end

Product.find_in_batches do |batch|
	write_array_to_file(batch)
end

#one gotcha here batch.update_all(:on_sale => false) not gonna work because update_all is ActiveRecord method and we are getting array

#so that's why we have in_batches it will return us ActiveRelation instead of array
Product.in_batches do |batch|
	sleep 5
	batch.update_all(:on_sale => false)#now we have access to update_all method
end

#########################################======>Default scopes
class User < ActiveRecord::Base
	default_scope { where(:active => true) }
	scope :inactive, lambda { where(:active => false) }

User.all # in the defoult_scope automatically add because its default 
User.inactive.all # alway return nil coz WHERE acitve = true AND active = false

User.unscoped.all #remove default scopes first

Use case for sorting

#########################################======>Replace scopes and conditions
products = Product.where("price >= 20")
porducts = Product.order("name ACS").limit(20)
products.all

#now if you want to undo the 'where'   you can
products.unscope(:where).all

products.excepts(:where).all #same as above
products.only(:where).all #now oposite of above

now if you want to revise

products = Product.where(:price => 100..200)

products.rewhere(:price => 100).100 # gotcha not working on string

#########################################======>Join table
Category.joins(:products).all
Product.joins(:category).all
Product.joins(:category).where(:categories => { :name => 'chair' } #note in where
# made two sql 
category = Category.find_by_name('chair')
products = Product.where(:category_id = category.id)

#########################################======>Distict records
Category.joins(:products).pluck(:name) # retrun duplicates
Category.joins(:products).distinct.pluck(:name) #alias uniq and distinct
#########################################======>left join tables
Product.left_outer_joins(:category).pluck(:name) #bring the recorde even if it hasn't relation 
#########################################======>eager loading or preloading
products = Prodcut.all

name = []
products.each do |pro|
	name << pro.category.name #hit db everytime when found a new category
end
---
products = Product.includes(:category).all
	->SELECT * FROM products
	->SELECT * FROM categories WHERE id IN (1,2,3) now it don't hit db again
products.each do |pro|
	name << pro.category.name #hit db everytime when found a new category
end

---
#If we use the hash syntax like this, active record is smart enough to know not to do two different queries as it did before
products = Product.includes(:category)
products = Product.includes(:category).
where(:categories => {:name => 'Furniture' }#note categories here is table name not relation name 
	->SELECT products.*, categories.* FROM products
	LEFT OUTER JOIN categories
	ON catagories.id = products.category_id
	WHERE categories.name = 'Furniture'
#if you use the string or an array syntax for your where clause then Rails won't recognize that a joins statement would be a more appropriate choice, it will still attempt to make two queries.
where("categories.name ='Furniture'") 
#solution if we want one sql like above then
So we daisy chain references and then once again include the relationship category. This is going to prompt the query to switch over to use that join format and will then allow the categories table to be available for our where clause.
products = Product.includes(:category).
where("categories.name ='Furniture'").
references(:category)

JOINS VS Includes
they work in similar ways but they're for two different purposes. Join allows the use of a related table when constructing a query and it does not return the related tables data, just the main table.
Include is used to preload related table data to prevent making many additional queries, it can also allow use of the related table data when constructing a query 
but it's primary purpose is to make a second set of active record objects available and ready for use.

#########################################======>delegate attributes 
sku (stock keeping unit)
in retail we use sku to subdivide a  product
So, if a product is a shirt, then the sku might be that same shirt but in small, medium, or large sizes. Or,
 it might be the same shirt but in different colors
It's essentially the same product, but with some different attributes, 
and retailers want to keep track of those attributes, because we're not just selling shirts generally. 
If we run out of large shirts, we want to be sure that we can order more. We want to know whether a certain shirt color is more popular than another shirt color, so maybe next season we can offer more of it. Now, if a user goes to purchase one of these shirts, we're going to want to know the price of that shirt. What's going to be in their shopping cart is not a shirt generally, but one of the skus. The shirt in a particular size or in a particular color, and we're going to want to be able to ask that item or that sku what it's price is.
It's essentially the same product, but with some different attributes, and retailers want to keep track of those attributes, because we're not just selling shirts generally. If we run out of large shirts, we want to be sure that we can order more. We want to know whether a certain shirt color is more popular than another shirt color, so maybe next season we can offer more of it. Now, if a user goes to purchase one of these shirts, we're going to want to know the price of that shirt. What's going to be in their shopping cart is not a shirt generally, but one of the skus. The shirt in a particular size or in a particular color, and we're going to want to be able to ask that item or that sku what it's price is.
Instead of having to write 15 different lines of code, I'm able to compress it down to one or two. I should also mention that these attributes do not need to be active record attributes stored in the database. The product object just needs to be able to answer with some value when the method is called on it, so custom defined methods in the product model would work just as well as database attributes
child asking  a parent for asking more information
class product
	belongs_to :category
	delegate :prefix, :to => :category
same as function below
def prefix
	category.prefix
end
#########################################======>set a prefix
delegate :number, :to => :category, :prefix => true
 Whenever prefix is set to true, the delegate methods are going to be prefixed with the name of the object that's being delegated to. So instead of calling sku.number in order to get that value, now I would call sku.product_number. Notice that it still returns sku.product.number. The prefixing happens only on the side where we're calling it. Essentially what we're saying is, change the name that I can access this attribute by to include a prefix value.

There are two reasons that you would do this. The first is that is makes it a little clearer that when I call sku.product_number, that I'm asking for the product number. I'm not asking for sku.number, which might lead me to believe that it's a number that's somehow unique to the sku. The second and more common reason is that there might already be an attribute on the sku called number. So I still want to be able to access that method. I want to call sku.number and get a value back but I also want to be able to call sku.product_number and get the product's number back.
delegate :number, :to => :category, :prefix => 'style'
now you can access by this 
#########################################======>witout a related object
It's perfectly acceptable to make that an optional setting so that a product might have a belongs to relationship to something or it might not.
delegate :number, :to => :category, :allow_nil => true
#########################################======>callbacks basics
 A callback is a way for you to be able to run code automatically, any time one of your objects is created, updated, or destroyed. And you can do that either before or after the object changes its state. The way that you write a callback is that you write a regular method inside the class and then you register that method as a callback, using one of several callback methods. Let's look at some of the callback methods that are available to you.
     CREATE 			UPDATE			DESTROY
- before_validation  	- before_validation
- after_validation 	- after_validation 
- before_save 		- before_save
- before_create		- before_update		   - before_destroy
	# CRUD Callbacks
- before_create         - before_update            - before_destroy
- around_create         - around_update            - around_destroy
- after_create          - after_update             - after_destroy
- after_save		- after_save		
- after_commit		- after_commit		   - after_commit
 After_commit callbacks get called whether we're creating, updating, or destroying. It's basically any time we finish working with the database
COMMIT SOMETHING IN SQL
perform clean up
send an email or an api calls etc

most of the case it is define as private function if you don't want to call by object 


USAGE
Set defaults values
update other records can be related or something 

#########################################======>conditional callbacks
add conditions to callbacks registration methods
:if, :unless
after_save :rejoie, :if => method_or_block
method or code block return true or false

before_validation :add_default_prefix, 
:if => Proc.new{|cat| cat.prefix.blank? }
??? what is Proc here
#########################################======>around callbacks
define code to execute both before and after 
one method, which must include yeild 
use when before and after are related
why not just use a before callback and an after callback separately then? We would use an around callback when those before and after actions are related in some way.

Some common uses for around callbacks would be to measure performance, so that you can compare the time before and action starts and the time after it ends or in order to log some information before and after or to perform some set up operations that then need to be torn down after the action takes place

around_save :log_start_end

def log_start_end 
	puts 'start before save'
	yeild
	puts 'end after save'
end
#########################################======>other callbacks and tipes
after_initialize everytime whenever an object is initialize new create or even when object is loaded from database
after_find 
after_touch
after_rollback opposite of commit 

HALT CALLBACKS ???

Remember also that there's some methods which skip callbacks all together. Here's a list of the most common ones that you're going to come across, and these are all methods that we've already covered in this very course. Usually it's because the method is going straight to SQL in order to speed things up, but by bypassing the Ruby on Rails model code, it prevents the callbacks from having an opportunity to run.
update_all, delete , delete_all 
increment, decrement
toggle 
touch

#########################################======>use queries with associations
has_many :product, lambda {order(:position)}
has_many :product, lambda {where(:enabled => true)}
Now whenever this association is returned, that scope is going to automatically be applied. It works a lot like a default scope, but instead of being on the model, it's a scope that's being applied to the association

has_many :comments, lambda {includes(:user)}
Another common usage is for eager loading. We talked about eager loading in the last chapter, using includes. Here we're asking it to return a list of comments. Maybe they're comments on a blog post. At the same time that we display those comments, we're probably going to want to display information about the user that created the comment, so it would make sense for us to preload all of those users at the same time.
WHY LAMBDA
Just know that what it means is that the code inside that code block will be evaluated at the time that it's called, not when the model is first loaded. The classic example of where this matters is if you were to use time.now inside your scope. You would expect time.now to be the time that you were calling the code, not the time that the code was originally loaded into Ruby on Rails.
#########################################======>destroy associted records 
class Prodcut
	has_many :images, :dependent => :destroy
	has_many :category, :dependent => :product #not a good practice 
#you can use 
:destroy #run rails code or call backs
:delete_all #do not run rails code
:nullify # do not delete the object instead set the null in foreign keys 
:restrict_with_error #This is going to check for associated objects and if they exist it's going to stop the destruction and instead add an error in the object's errors array
:restrict_with_exception #That is, throws a big application error that would be up to you to catch. If you didn't catch it then your users would probably get a 500 error. 
end


#########################################======>touch associated records
belongs_to :category, :touch => true
Note that this only works on belongs to associations and none of the validation are going to run

#########################################======>counter caches
@category.products.size
 SELECT the COUNT FROM products WHERE category_id = 1.
Now let's imagine that instead of just having one category,
 and wondering about how many products it has, let's imagine that we want to display a list of 100 categories,
 and we want that list to have the category name, and then right next to it, have a number of the products in each categories. We would need to fire off 100 SQL queries, as we went through that loop. Counter Caches give us a way to avoid all those extra database queries, by storing a count of the child objects on the parent object, by actually storing it in a column on the parent object's table.
"parent object's table stores a count of child objects"

belongs_to :category, :counter_cache => true #That will enable a counter cache on the categories table.
Counter cache, is going to be an option that you're going to use on the belongs_to relationship, record have to be updated in the child tables

category.products_count
you have to add column in perent table 
category.productss.count
category.productss.size

COUNT VS SIZE count always goes to the database

#########################################======>Build records on an association 
category = Category.first
Product.create(:name => "Desk", :category => category)

product = Product.new(:name => "shelf")
category.products << product

category = Category.first
Category.products.build(:name => "cabinet")
#build is like calling new
#It would have the right foreign key set so it would be part of that set. Now as I said, 'build' works like 'new' We also have 'create' which works like 'create' does. It instantiates a new one and it saves it immediately. The return value of both of these would be a 'product object'. This is how you would do it if you had a "has many" relationship
# use create instead of build if you want to new + save 

#but if you have belongs to and hasone relation then 
product.build_categoty(:name => "Garden')

#########################################======>self-referential associations
class Employee < ActiveRecord::Base
	belongs_to :supervisor,
	:class_name => 'Employee'

	has_many :subordinates,
	:class_name => 'Employee',
	:foreign_key => 'supervisor_id'
end

user.supervisor
user.subordinates

another usage
 So here, I have a self-referential association where a comment can have a parent comment, if we've responded to someone else, or a comment can have many responses if there have been many responses on this comment which in turn are other comments.

class Comment < AcitveRecord::Base
	belongs_to :parent,
	:class_name => 'Comment' , :optional => true ## because if we have more than on root than this 
optional would help us there /\  /|\ like this 
	
	has_many :responses,
	:class_name => 'Commnet',
	:foreign_key => 'parent_id'
end

#########################################======>single table inheritence STI
 That is, they're going to use the same columns, or at least roughly the same columns. But, here's where it's different from self-referential association. We're going to be using different classes in order to allow for different behavior, and those classes will inherit from other active-record classes.
all objects have a similar data structure (same column)
different classes allow for different behaviors
behaviors can be inherited or overridden

class BlogPost < ActiveRecord::Base
	def allow_comments?
		true
	end
	def send_email_when_published?
		true
	end
end
now imagine there are also two types of post
class Review < BlogPost
	def allow_comment?
		false
	end
end
class Teaser < BlogPost
	def send_email_when_published? #inherited and overidden those behaviour according to their needs
		false
	end
end
now rails model to the trick you only have to add a single column type 

BlogPost.all #select from blog_post

Review.all # BlogPost.where(:type => 'Review').all

rails g model Review --parent=BlogPost #to tell the rails that do not run migration for us and should inherit from BlogPost

 So, to summarize, single table inheritance is useful in cases where the data is almost identical between a variety of different models. But the models and the behaviors are not. We want to have different behaviors for different cases.

#########################################======>Polymorphic associations
model belongs to several other models 
has similar data structure and model code
but we just want it to be owned by diffrent models

class Picture < AcitveRecord::base
	belongs_to :documentable, :polymorphic => true
end
class User < AcitveRecord::Base
	has_many :pictures, :as => :documentable
end
class Product < ActiveRecord::Base
	has_many :documents, :as => :documentable
end

file_name || documentable_id || documentable_type
zzima@outlook.com
5296491.10673704
-----
https://www.lynda.com/Git-tutorials/Basic-Git-configuration/5030978/2810944-4.html
https://www.lynda.com/JavaScript-tutorials/Installing-Node-js-npm/5035829/2217941-4.html
https://www.youtube.com/watch?v=MhkGQAoc7bc&list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b react
https://www.youtube.com/watch?v=dSKALhlsuE8
https://reactjs.org/docs/hello-world.html

https://medium.com/better-programming/how-to-create-a-follow-feature-in-rails-by-aliasing-associations-30d63edee284
https://www.youtube.com/watch?v=1ZkwvPMiq4Q acitve record tricks

---------
hello lionel richie
total eclipse of the heart bonnie tyler
i will always love you
unchained melody
what a wonderful world
