#2 ###########################################
otl:import 
it will run a import script and its import the data that the code needs

#3 ###########################################
oop language
1995 Yukihiro Matsumoto (Matz)
Framework::A set of code libraries and data-structures that provide generic functionality that can be used, overridden,or further specialized
 
#4 ###########################################
browser----web server-------------public folder-----routes-----controller<------->model------database
chrome-----puma,appace,enginX----				view

view[ActionView] , controller[ActionController] , model[ActiveRecord]
ActionView and ActionController are grouped togather in [ActionPack ]

#5 ###########################################
rails new cms -d mysql 
by default it gonna be sqlite 

#6 ###########################################
talked about gemfile bundle install
talked about directory structure 
config/application.rb = in this our genral application configuraiton 
initializers
environment

rails db:schema:dump go to the database and get the defination of database and dump it into a text file 

#7 ###########################################
talked about model view controller
helper help us to write in views
assets our js css all the things
mailer if our app send an mail or something 
job ????
channels action cable code here ?? 
db all our migration are here 
log all errors and information about app
vendor 3rd party code
lib your own code for reuse

#8 ###########################################
rails server nothing more 

#9 ###########################################
rails generate enter it will give us the help that what can we built 
rails generate demo index .. view2 view3 demo is controller
make demo controller 
make demo folder and a view file index.html.erb in it in views folder
make route for index view 
make other files like scss js test etc

#10 ###########################################
if file found in public folder then it will never be hit the rails server 
we oftenly put a static pages in public folder like error 404 505 etc

#11 ###########################################
there are two primary types of http request GET AND POST
GET is when you enter or click a link and POST is when you submit the data through form

route types 

simple route 	
	get "demo/index" have to write index while in root route not 
	longer version 
		match "demo/index, :to => "demo#index",
		:via => :get
default route
	:controller/:action/:id
	posts/edit/3
	get ':controller(/:action(/:id))' the prenthisis make them optional in this case action and id are optional allows to be ommited
root route
	root 'demo#index' pound sign #  if nothing will match main page of your web
resourceful routes

#13 ###########################################

make a new view in demo folder and enter a routes in get 'demo/hello' and run 
run fine however we dont tell the controller what to view bydefault rails use his sense and lookup for the view in demo folder automatically
no hello action define in demoController yet he is smart enough
render(:template => 'demo/hello') short hand render('demo/hello')

#14 ###########################################
HTTP/1.1 302 Found redirect fuction webserver request to the browser that i want a different page 
ping pong effect

redirect_to(:controller => 'demo', action => 'index' if its in a same controller we can omit controller part
redirect_to('http://lynda.com')

#15 ###########################################
erb = embeded ruby
erb template
<% code %> process and execute ruby code
<%= code %> process and execute ruby code

<%= "hello #{name}" %> output hello zair

for debugging puts in rails its output in console

#16 ###########################################
var 
@var this is the instance variable 
if you want to render a page you should use a  @instance variable so that it can be accessible thats the only way the communication b/w controller and view 
@array in edit action can be access by edit.html.erb
in controller
def index 
	@array = [1,2,3,4,5]
	render('index')
end 
in view 
<% @array.each do |f| %>
	<%= f %> <br/>
<% end %>

#17 ###########################################
link
<a href="/demo/index">index page</a> this is the basic html link
<%= link_to(text,target) %> helper method  link_to just like above one 
<%= link_to(indexpage ,"/demo/index") %>
it can also be hash
{:controller => 'demo', :action => 'index'}

#18 ###########################################
url parameter
/demo/hello?page=3&id=20&name=zair query parameter
params[:id] symbol 
@id = params['id']string works the same 
@name = params[:page] params is always a string so if we want to go into next page @page+1 not work 
<%= link_to(indexpage , {:action => 'edit' , :page => 3, :id => 20, :name => 'zair' } ) %> 
becomes
localhost:3000/demo/hello?page=3&id=4&name=zair you can see page is not the part of url 
but if you use default routes then see what happens 
get ':controller(/:action(/:page))' now page is given special place in url like
demo/hello/3?id=20&name=zair 	NOTE DEPRICIATED
now we can use in view <%= @name %>
PARAMS IS ALWAYS A STRING NOTED THAT

#19 ###########################################
field intersaction of a column and row
always puts indexes on foreign keys
schema structural defination of a database complete index table etc

#20 ###########################################
SHOW DATABASES;
CREATE DATABASE db_name;
USE db_name;
DROP DATABASE db_name;

configfure project for a database
config/database.yml add database crenditial
to check if rails have access
rails db:schema:dump 

best practice make a new user and give him a privileges to that specific database
GRANT ALL PRIVILEDGES ON rails_cms.* TO 'username'@'localhost'  
IDENTIFIED BY 'password' (.* its a wild card means all the table within that database)
SHOW GRANTS FOR 'username'@'localhost';


#21 ###########################################
migration
set of database instrucition written in ruby
migrate from one state into another 

migration maintain the schema of database with our appliction code 
create the database instantly 
helps with versioning

#22 ###########################################
generate migration 
$- rails generate migration PostComment create a file which resides in db/migrate
def change is a short hand for up and down methods
def up method that we want to make changes
def down reverse the changes

#23 ###########################################
Model along with their migration
$- rails genreate model Post  should  be singular IMP NOTE

t.column "first_name", :string, :limit => 25
t.string "last_name" SHORTHAND
binary -boolean -date -datetime -decimal -float -integer -string -text -time
:limit ->size
:default ->value
:nulll -> true/false

:precision ->number
:scale ->number

create_table :users :id => false do |col| if we don't want to add id column by defoutl
col.column "name", :string, :limit =>40
t.string "email", :default => '' ,:null => false
if we have any name in our column then this two column automatically added
t.datetime "created_at"
t.datetime "updated_at"
short hand of this is 
t.timestamps

#24 ###########################################
rails db:migrate
rake change in rails in RoR5
mysql -u root -p rails_cms 
if dont give a database name you have to tell it after putting password like 
use rails_cms

SHOW FIELDS FROM users;

select * from schema_migration in this table migration version are save 
and track which migration is run already 

now what if we want to migrate run down
rails db:migrate VERSION=0  version should be in capital letters NOTICE
runs for all migration
all the code that is define in def down will execute drop the table that we just created 

to know about where is the migration is 
rails db:migrate:status will show you which migration is up or down
give you this after you run VERSION=0 you can take the migration ID from here
 Status   Migration ID    Migration Name
--------------------------------------------------
  down    20190720115841  Do nothing yet
  down    20190720150322  Create users
-------------------------------------------------
rails db:migrate VERSION=20190720150322 
up all the migration upto that in this case Do nothing yet and so on 
but if you want to up or down specific migration you will do like this 
rails db:migrate:down VERSION=20190720150322
rails db:migrate:up VERSION=20190720150322
rails db:migrate:redo VERSION=20190720150322 redo as the word bydefault the last version (migration)

# 25 ###########################################
TABLE MIGRATION METHOD
create_table(table, options) do |t|
	... columns...
end
drop_table(table)
rename_table(table, new_name) 

COLUMN MIGRATION MEHTOD
add_column(table,column,type, options)
remove_column(table, column)
rename_column(table, column, new_name)
chage_column(table, column, type, options)

INDEX MIGRATION METHOD
add_index(table, column, options) we can apply index more then one column by send an list of column in array
:unique => true/false
:name => "your_custom_name"

remove_index(table, column)

#26 MIGRATION PROBLEM  ###########################################
#27 MIGRATION PROBLEM SOLUTION ###########################################
#28 CHALLENGE CREATE MIGRATION ########################################### 

rails g model Subject.....Page....Section
adding code in migration 

#29 ACTIVERECORD AND ACTIVERELATION ###########################################

active record : design pattern for relational database
ActiveRecord Rails implementaion of active record pattern 
retrieve and manipultae data as objects .not as static rows
EXAMPLE OF ACTIVERECORD
user = User.new
user.first_name = "zair"
user.save # SQL INSERT

user.last_name = "umer"
user.save #SQL UPDATE

user.delete # SQL DELETE

AcitveRelation also known as ARel
object-oriented interpretation of relation algebra 
simplifies the genratioiion of complex database quires
small queruies are chainable 
complex joins and aggregation use efficient sql
queries do not execute until needed

EXAMPLE OF ACTIVE RELATION
users = User.where(:first_name => "zair")
users = users.order("last_name ASC").limit(5)

SELECT users.* FROM users 
WHERE users.first_name = "zair" 
ORDER BY users.last_name ASC 
LIMIT 5

#30 ###########################################
MODEL NAMING 
Names matter
all model inherit from ApplicationRecord which is inherit form ActiveRecord::Base and this is the core part of rails where we adding  behaviour to class
the commen code for all the model place in ApplictionRecord
table name maybe the same as model name and model class name
it is a ruby convention tough
but if you dont want to then no problem 

self.table_name = "admin_users"
or change the class name and file name too class AdminUser <- User and file name admin_user.rb <- user.rb 

#31 ###########################################
MODEL ATTRIBUTE
attr_accessor :first_name it is a short hand  for getter and setter function 
in a rails model when we inherit from ActionRecord::Base we gain alot of behaviour and ability that is built
in ActiveRecord::Base
FOR EXAMPLE it already know that where to locate the database table that correspond with the model and table columns 
give us setter and getter automatically and also know that how to type cast them correctly 
if visible is boolean its comes as boolean and goes as an boolean value

#32 ###########################################
THE RAILS CONSOLE 
irb 
raisl console development

#33 ###########################################
u = User.new
u.new_record?   # return true because yes this is not save to the database yet
or 
if u.save  puts "successfully insert"
p = Page.new(:name => "First Page", :permalink => 'first page', :position => 1)

#34 ###########################################
UPDATE RECORDS
u = User.find(3)
u.name = "zair" # and step by step 
s = Subject.find(4)
s.updated_attributes(:name => "zair", :visible => true)

#35 ###########################################
DELETE RECORDS
u = User.find(3)
u.destroy
u #return you the record even though that record is no longer in database for you inpection 

#36 ###########################################
FIND RECORDS
priamry key finder  
User.find(3)

dynamic finders 
User.find_by_name("First Subject") # return object or nil arais no error 

User.all # return object or nil arais no error 
User.first # return object or nil arais no error 
User.last # return object or nil arais no error 

#37 ###########################################
QUERY METHODS
by string #Flexible but raw SQL
"name='test' AND visible= true"
"name='#{@name}' AND visible = true" #@name could be a point for sql injection 
by array 
["name=? AND visible = true","test"] santize it
hash
{:name => "test", "visible => true} safe
each key-value pair joined with AND
only work with equlality and ranges (34,354,[23,45,4]) whatever 
we don't have complex sql idea in FOR EXAMPLE OR, LIKE , LESS THAN OR GREATER THAN

can be chained up 
User.where(:lastn => 'umer').where(:firstn=>'zair')
User.where(:lastn => 'umer' , :firstn => 'zair')
where clause dont executes database imidiatly  execute in last when all the data is 
but no or like less than or greater than

#38 ###########################################
QUERY METHODS: ORDER, LIMIT AND OFFSET(skip the records)
User.order(:postition).limit(20).offset(40)
order("postion")
order(:postition => :asc) by default ascending
order("position ASC")

NOTICE you have to specify which table when you retrive a record from more than one table 
order("users.created_at ASC")

#39 ###########################################
NAMED SCOPE
queries defined in a model
defined using ActiveRelation query methods
can be called like ActiveRelation methods and can accepts parameters
rails 5 lamda syntax
scope :acitve, lambda {where(:active => true)}
scope :acitve -> {where(:active => true)} #staby lambda
same as method
def self.active
	where(:active => trur)
end

scope :newest_first, lambda {order("created_at DESC")
scope :search , lambda {|query| where(["name LIKE ?", "%#{query}%"])}
scope :with_content_type, lambda {|ctype|where(:active => ctype)}
def self.with_content_type(ctype)
	where(:content_type => ctype)
end
section.with_content_type('html')
both work in the same way the why we use lambda syntax?????????

scope :recent , lambda{
where(:created_at => 1.week.ago..Time.now)
}
evaluated
now in this example time.now in method will have the value(time)
when rails first boots up on the other hand scope have the value(time)
exact at the moment 
and for the chaining scopes 
var = Article.recent.visible.newest_first
much shorter and readable clear
when its call

#40 ###########################################
relationship 
all three

#41 ono-to-one ###########################################
has_one :page (in Subject model)
belongs_to :subject, {:foreign_key => 'foo_id'}  (in Page Model)
we don't need to specifiy foregin key if we already made a column with the other table name 
like subject_id  

subject = subject.find(1)
subject id 1 name: "ror' postition: 1 visible true cre....
first_page = Page.new (:name => "first" :permalink => "first_page" :postion => 1)
return
page id nill subject_id:nil name: "first" permalink: "first_page" position: 1

subject.page = first_page 
it will add forign key
page id 2 subject_id:1 name: "first" permalink: "first_page" position: 1

now remove the association 
subject.page = nil
update 'page' SET 'subject_id' = nil where 'page'.'id' = 2 
or if you want to destroy 
subject.page.destroy

#42 one to many ###########################################
return array 
Subject has_many :pages
Page belongs_to :subject

subject.pages() return all the pages related to that subject
subject.pages << page if we want to add a page to a collection append opratore
subject.pages = [page,page,page] we have to defined every thing within the collecction
subject.pages.delete(page) if i want to delete a page and the object of the page that i want to delte
subject.pages.destroy(page) delete the page and accociation also 
subject.pages.clear to remove all pages 
subject.pages.empty? to know if array is empty
subject.pages.size return the no of pages 
create a page first_page 
then 
first_page have pageid and subject id is nil
s = Subject.find(2)
first_page = Page.new(:name => "First Page", :permalink => 'first' :postion => 1)
s.pages << first_page
but now it have it

#43 belongs_to presence validation ###########################################
change in rails 5.0
an object that has belongs_to relationship could be save to the database
even it didn't have the parent object associate with it but not in rails 5
now ActiveRecord adds a validation for the object presence
means order can't be place witout a customer
you can disable it for rails 4 apps in configuraiton for entire application
Disable: {:optional => true}
if you create a new record and try to save it without the parent 
page.errors.full_messages  return ["subject must exist"]
belongs_to :subject,{:optional => true }
belongs_to page is not save until subject exist

#44 many to many association ###########################################

-require a join table 
(you can name this table anything you want but rails have a convention for this too
firstTable+_+secondTable 
-two foreign keys; index both keys together
-no primary key column (:id => false)
-add same instance methods to the class like one to many


plurals and alphabatical order and underscore
Example

Project-collaborator
collaborators_projects

adminUser-page
admin_users_pages 

rails g migration CreateAdminUsersPagesJoin # create keyword rails convention understand that we want to create a table 

has_and_belongs_to_many :admin_users, :join_table => 'admin_users_pages'
#we can specify the join table if we do not follow rails convention

has_and_belongs_to_many :pages
#in admin_users.rb model

page = page.find(3)
me = AdminUser.new(:first_name => 'zair', :last_name => 'umer', :username => 'spy')
page.admin_users << me 
mysql> select * from admin_users_pages;
+---------------+---------+
| admin_user_id | page_id |
+---------------+---------+
|             2 |       3 |
+---------------+---------+

#45###########################################
MANY TO MANY ASSOCIATION :RICH

compared to many-to-many simple associations
-still uses a join table with two indexed foregin keys
-Requires a primary key column (:id)
-join table has its own model
-no table name conventions to follow 
-name ending in "-ments" or "ships" work well
like assignments - engagments - autherships - memberships 

AdminUser-Section (the idea everytime the admin made changes to the section we keep the track in table section_edits

AdminUser has_many :section_edits
sectionEdit belongs_to :admin_user

Section has_many :section_edits
SectionEdit belongs_to :section

rails g model SectionEdit

class SectionEdit < ApplicationRecord
    belongs_to :admin_user
    belongs_to :section
end
class AdminUser < ApplicationRecord
    has_many :section_edits
end
class Section < ApplicationRecord
    has_many :section_edits
end
sec = Section.create(:name => "Section One", position: 1)
p = Page.find(2)
p.sections << sec
me = AdminUser.find(2)
edit = SectionEdit.new(:summary => 'Test edit', :admin_user => me, :section => sec)
edit.save
return 
INSERT INTO `section_edits` (`admin_user_id`, `section_id`, `summary`, `created_at`, `updated_at`) VALUES (2, 1, 'Test edit', '2019-07-22 01:46:17', '2019-07-22 01:46:17')
me.section_edits if it use its cache and giving you an error
me.section_edits(true)

#46###########################################
TRAVERSING A RICH ASSOCIATION
qasam ly lo jo samjh ai ho
??????????????????????????????????????????????????????????????????????????????????

#47###########################################
CRUD 
theory about crud
seprate controller for each Subjects, Pages , Sections #plural because we control all of our pages not just one page with that controller
allows for clear URLs
rails g controller Subjects index show new edit delete 


#48###########################################
REST
Representational State Transfer
do not perform procedure 
but Perform state transformations upon resources 

REST Paradigm Requirments
-1 Organize code into resources
Encourages one controller for each model
-2 Learn HTTP verbs for working with resources 
Determine which CRUD acitons are suited for each verb
-3 Map a new URL syntax to controller actions 
Change Rails routes
-4 Modify existing links and forms to use new URL syntax 
Use resourceful URL helpers

REST HTTP Verbs there are four
GET POST Patch Delete 

it fake true rest request by adding a hidden input field called _method and uses post as the method for the form
<form method="PATCH" action="/subjects/123">
#....
</form>
<form method="POST" action="/subjects/123">
	<input type="hidden" name="_method" value="patch" />
</form>

#49###########################################
Resourceful Routes
what we do is match routes or default routes we can use it for REST but 
then why Resourceful Routes 
-first it is Rails defualts
-Optimized for rest
-simple, consistent,organized structure 
-imporves application security
-Most pro use this

resources :subjects    <------ Resourceful Routes
resources :pages       Notice :: delete is not by default in it because it is optional want to show page or js popup your choice 
resources :sections

http method are now gonna determine which will execute
action show , update and destroy having the same url /subjects/:id
if its GET then show will run if its PATCH update will run and so on 

Limiting Resourcful Routes 
you don't have to define all the action on the resource 

resources :admin_users, :expect => [:show]
resources :products, :only => [:index, :show]
you can controll which should be given routes

Adding Resourceful Routes
it is also possible to add additional resources

resources :subject do 
	member do 
		get :delete # which accept record id in url like edit and update 
	end 
	collection do 
		get :export #it oprate on resource as whole they do not except record id like index , new , create 
	end 
end
#50###########################################
{:controller => 'subjects', :action => 'show' , :id => 5}
subject_path(5) url helper
<%= link_to('All Subjects', subjects_path ) %>
<%= link_to('All subjects', subjects_path(:page => 3) %>
<%= link_to('Show Subject', subject_path(@subject.id) %> .id is optional rails is smart enough
<%= link_to('Show Subject', Subject_path(@subject.id , :format => 'verbose' )) %>
<%= link_to('Edit Subject', edit_subject_path(@subject.id)) %>


===================================================================================
gem install mysql2 -- --with-mysql-config="D:\server\mysql\bin" --with-mysql-include="D:\server\apache2\include" --with-mysql-lib="D:\server\apache2\lib"
\q: Quit/Exit.
\c __database__: Connect to a database.
\d __table__: Show table definition including triggers.
\dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones).
\l: List databases.
\dn: List schemas.
\df: List functions.
\dv: List views.
\df+ __function__ : Show function SQL code.
\x: Pretty-format query results instead of the not-so-useful ASCII tables.

"it may sound like tough love,
but look, if at some point you got lied to, it's because you agree to get lied to.
lying's is a coperative act"

everyone is willing to give you something 
they are ready to give you something for whatever it is they're hungry for. and that is the crux of it
